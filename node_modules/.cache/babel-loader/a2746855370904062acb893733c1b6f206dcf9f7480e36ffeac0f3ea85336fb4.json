{"ast":null,"code":"import { useTreeViewContext } from '../internals/TreeViewProvider/useTreeViewContext';\nexport function useTreeItemState(itemId) {\n  const {\n    instance,\n    selection: {\n      multiSelect\n    }\n  } = useTreeViewContext();\n  const expandable = instance.isNodeExpandable(itemId);\n  const expanded = instance.isNodeExpanded(itemId);\n  const focused = instance.isNodeFocused(itemId);\n  const selected = instance.isNodeSelected(itemId);\n  const disabled = instance.isNodeDisabled(itemId);\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        instance.focusItem(event, itemId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      // If already expanded and trying to toggle selection don't close\n      if (expandable && !(multiple && instance.isNodeExpanded(itemId))) {\n        instance.toggleNodeExpansion(event, itemId);\n      }\n    }\n  };\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        instance.focusItem(event, itemId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n      if (multiple) {\n        if (event.shiftKey) {\n          instance.selectRange(event, {\n            end: itemId\n          });\n        } else {\n          instance.selectNode(event, itemId, true);\n        }\n      } else {\n        instance.selectNode(event, itemId);\n      }\n    }\n  };\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}","map":{"version":3,"names":["useTreeViewContext","useTreeItemState","itemId","instance","selection","multiSelect","expandable","isNodeExpandable","expanded","isNodeExpanded","focused","isNodeFocused","selected","isNodeSelected","disabled","isNodeDisabled","handleExpansion","event","focusItem","multiple","shiftKey","ctrlKey","metaKey","toggleNodeExpansion","handleSelection","selectRange","end","selectNode","preventSelection","preventDefault"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/TreeItem/useTreeItemState.js"],"sourcesContent":["import { useTreeViewContext } from '../internals/TreeViewProvider/useTreeViewContext';\nexport function useTreeItemState(itemId) {\n  const {\n    instance,\n    selection: {\n      multiSelect\n    }\n  } = useTreeViewContext();\n  const expandable = instance.isNodeExpandable(itemId);\n  const expanded = instance.isNodeExpanded(itemId);\n  const focused = instance.isNodeFocused(itemId);\n  const selected = instance.isNodeSelected(itemId);\n  const disabled = instance.isNodeDisabled(itemId);\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        instance.focusItem(event, itemId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      // If already expanded and trying to toggle selection don't close\n      if (expandable && !(multiple && instance.isNodeExpanded(itemId))) {\n        instance.toggleNodeExpansion(event, itemId);\n      }\n    }\n  };\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        instance.focusItem(event, itemId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n      if (multiple) {\n        if (event.shiftKey) {\n          instance.selectRange(event, {\n            end: itemId\n          });\n        } else {\n          instance.selectNode(event, itemId, true);\n        }\n      } else {\n        instance.selectNode(event, itemId);\n      }\n    }\n  };\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,kDAAkD;AACrF,OAAO,SAASC,gBAAgBA,CAACC,MAAM,EAAE;EACvC,MAAM;IACJC,QAAQ;IACRC,SAAS,EAAE;MACTC;IACF;EACF,CAAC,GAAGL,kBAAkB,CAAC,CAAC;EACxB,MAAMM,UAAU,GAAGH,QAAQ,CAACI,gBAAgB,CAACL,MAAM,CAAC;EACpD,MAAMM,QAAQ,GAAGL,QAAQ,CAACM,cAAc,CAACP,MAAM,CAAC;EAChD,MAAMQ,OAAO,GAAGP,QAAQ,CAACQ,aAAa,CAACT,MAAM,CAAC;EAC9C,MAAMU,QAAQ,GAAGT,QAAQ,CAACU,cAAc,CAACX,MAAM,CAAC;EAChD,MAAMY,QAAQ,GAAGX,QAAQ,CAACY,cAAc,CAACb,MAAM,CAAC;EAChD,MAAMc,eAAe,GAAGC,KAAK,IAAI;IAC/B,IAAI,CAACH,QAAQ,EAAE;MACb,IAAI,CAACJ,OAAO,EAAE;QACZP,QAAQ,CAACe,SAAS,CAACD,KAAK,EAAEf,MAAM,CAAC;MACnC;MACA,MAAMiB,QAAQ,GAAGd,WAAW,KAAKY,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,OAAO,CAAC;;MAElF;MACA,IAAIhB,UAAU,IAAI,EAAEa,QAAQ,IAAIhB,QAAQ,CAACM,cAAc,CAACP,MAAM,CAAC,CAAC,EAAE;QAChEC,QAAQ,CAACoB,mBAAmB,CAACN,KAAK,EAAEf,MAAM,CAAC;MAC7C;IACF;EACF,CAAC;EACD,MAAMsB,eAAe,GAAGP,KAAK,IAAI;IAC/B,IAAI,CAACH,QAAQ,EAAE;MACb,IAAI,CAACJ,OAAO,EAAE;QACZP,QAAQ,CAACe,SAAS,CAACD,KAAK,EAAEf,MAAM,CAAC;MACnC;MACA,MAAMiB,QAAQ,GAAGd,WAAW,KAAKY,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,OAAO,CAAC;MAClF,IAAIH,QAAQ,EAAE;QACZ,IAAIF,KAAK,CAACG,QAAQ,EAAE;UAClBjB,QAAQ,CAACsB,WAAW,CAACR,KAAK,EAAE;YAC1BS,GAAG,EAAExB;UACP,CAAC,CAAC;QACJ,CAAC,MAAM;UACLC,QAAQ,CAACwB,UAAU,CAACV,KAAK,EAAEf,MAAM,EAAE,IAAI,CAAC;QAC1C;MACF,CAAC,MAAM;QACLC,QAAQ,CAACwB,UAAU,CAACV,KAAK,EAAEf,MAAM,CAAC;MACpC;IACF;EACF,CAAC;EACD,MAAM0B,gBAAgB,GAAGX,KAAK,IAAI;IAChC,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,OAAO,IAAIR,QAAQ,EAAE;MAChE;MACAG,KAAK,CAACY,cAAc,CAAC,CAAC;IACxB;EACF,CAAC;EACD,OAAO;IACLf,QAAQ;IACRN,QAAQ;IACRI,QAAQ;IACRF,OAAO;IACPM,eAAe;IACfQ,eAAe;IACfI;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}