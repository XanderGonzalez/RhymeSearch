{"ast":null,"code":"import * as React from 'react';\nimport { EventManager } from '../../utils/EventManager';\nimport { populateInstance } from '../../useTreeView/useTreeView.utils';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nexport const useTreeViewInstanceEvents = _ref => {\n  let {\n    instance\n  } = _ref;\n  const [eventManager] = React.useState(() => new EventManager());\n  const publishEvent = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    eventManager.emit(name, params, event);\n  }, [eventManager]);\n  const subscribeEvent = React.useCallback((event, handler) => {\n    eventManager.on(event, handler);\n    return () => {\n      eventManager.removeListener(event, handler);\n    };\n  }, [eventManager]);\n  populateInstance(instance, {\n    $$publishEvent: publishEvent,\n    $$subscribeEvent: subscribeEvent\n  });\n};\nuseTreeViewInstanceEvents.params = {};","map":{"version":3,"names":["React","EventManager","populateInstance","isSyntheticEvent","event","isPropagationStopped","undefined","useTreeViewInstanceEvents","_ref","instance","eventManager","useState","publishEvent","useCallback","_len","arguments","length","args","Array","_key","name","params","defaultMuiPrevented","emit","subscribeEvent","handler","on","removeListener","$$publishEvent","$$subscribeEvent"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/corePlugins/useTreeViewInstanceEvents/useTreeViewInstanceEvents.js"],"sourcesContent":["import * as React from 'react';\nimport { EventManager } from '../../utils/EventManager';\nimport { populateInstance } from '../../useTreeView/useTreeView.utils';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nexport const useTreeViewInstanceEvents = ({\n  instance\n}) => {\n  const [eventManager] = React.useState(() => new EventManager());\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    eventManager.emit(name, params, event);\n  }, [eventManager]);\n  const subscribeEvent = React.useCallback((event, handler) => {\n    eventManager.on(event, handler);\n    return () => {\n      eventManager.removeListener(event, handler);\n    };\n  }, [eventManager]);\n  populateInstance(instance, {\n    $$publishEvent: publishEvent,\n    $$subscribeEvent: subscribeEvent\n  });\n};\nuseTreeViewInstanceEvents.params = {};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;EAChC,OAAOA,KAAK,CAACC,oBAAoB,KAAKC,SAAS;AACjD,CAAC;AACD,OAAO,MAAMC,yBAAyB,GAAGC,IAAA,IAEnC;EAAA,IAFoC;IACxCC;EACF,CAAC,GAAAD,IAAA;EACC,MAAM,CAACE,YAAY,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,MAAM,IAAIV,YAAY,CAAC,CAAC,CAAC;EAC/D,MAAMW,YAAY,GAAGZ,KAAK,CAACa,WAAW,CAAC,YAAa;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAC7C,MAAM,CAACC,IAAI,EAAEC,MAAM,EAAEjB,KAAK,GAAG,CAAC,CAAC,CAAC,GAAGa,IAAI;IACvCb,KAAK,CAACkB,mBAAmB,GAAG,KAAK;IACjC,IAAInB,gBAAgB,CAACC,KAAK,CAAC,IAAIA,KAAK,CAACC,oBAAoB,CAAC,CAAC,EAAE;MAC3D;IACF;IACAK,YAAY,CAACa,IAAI,CAACH,IAAI,EAAEC,MAAM,EAAEjB,KAAK,CAAC;EACxC,CAAC,EAAE,CAACM,YAAY,CAAC,CAAC;EAClB,MAAMc,cAAc,GAAGxB,KAAK,CAACa,WAAW,CAAC,CAACT,KAAK,EAAEqB,OAAO,KAAK;IAC3Df,YAAY,CAACgB,EAAE,CAACtB,KAAK,EAAEqB,OAAO,CAAC;IAC/B,OAAO,MAAM;MACXf,YAAY,CAACiB,cAAc,CAACvB,KAAK,EAAEqB,OAAO,CAAC;IAC7C,CAAC;EACH,CAAC,EAAE,CAACf,YAAY,CAAC,CAAC;EAClBR,gBAAgB,CAACO,QAAQ,EAAE;IACzBmB,cAAc,EAAEhB,YAAY;IAC5BiB,gBAAgB,EAAEL;EACpB,CAAC,CAAC;AACJ,CAAC;AACDjB,yBAAyB,CAACc,MAAM,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}