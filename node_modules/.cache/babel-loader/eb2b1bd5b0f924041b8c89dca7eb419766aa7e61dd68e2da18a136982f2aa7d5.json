{"ast":null,"code":"import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {}\n\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\nexport function createUseInstanceEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useInstanceEventHandler(instance, eventName, handler) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event);\n        }\n      };\n      subscription.current = instance.$$subscribeEvent(eventName, enhancedHandler);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact,\n      // The callback below will be called once this reference stops being retained\n      () => {\n        subscription.current?.();\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event) => {\n          if (!event.defaultMuiPrevented) {\n            handlerRef.current?.(params, event);\n          }\n        };\n        subscription.current = instance.$$subscribeEvent(eventName, enhancedHandler);\n      }\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n      return () => {\n        subscription.current?.();\n        subscription.current = null;\n      };\n    }, [instance, eventName]);\n  };\n}\nconst registryContainer = {\n  registry: null\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_resetCleanupTracking = () => {\n  registryContainer.registry?.reset();\n  registryContainer.registry = null;\n};\nexport const useInstanceEventHandler = createUseInstanceEventHandler(registryContainer);","map":{"version":3,"names":["React","TimerBasedCleanupTracking","FinalizationRegistryBasedCleanupTracking","ObjectToBeRetainedByReact","createUseInstanceEventHandler","registryContainer","cleanupTokensCounter","useInstanceEventHandler","instance","eventName","handler","registry","FinalizationRegistry","objectRetainedByReact","useState","subscription","useRef","handlerRef","current","cleanupTokenRef","enhancedHandler","params","event","defaultMuiPrevented","$$subscribeEvent","cleanupToken","register","unregister","useEffect","unstable_resetCleanupTracking","reset"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/hooks/useInstanceEventHandler.js"],"sourcesContent":["import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {}\n\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\nexport function createUseInstanceEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useInstanceEventHandler(instance, eventName, handler) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event);\n        }\n      };\n      subscription.current = instance.$$subscribeEvent(eventName, enhancedHandler);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact,\n      // The callback below will be called once this reference stops being retained\n      () => {\n        subscription.current?.();\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event) => {\n          if (!event.defaultMuiPrevented) {\n            handlerRef.current?.(params, event);\n          }\n        };\n        subscription.current = instance.$$subscribeEvent(eventName, enhancedHandler);\n      }\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n      return () => {\n        subscription.current?.();\n        subscription.current = null;\n      };\n    }, [instance, eventName]);\n  };\n}\nconst registryContainer = {\n  registry: null\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_resetCleanupTracking = () => {\n  registryContainer.registry?.reset();\n  registryContainer.registry = null;\n};\nexport const useInstanceEventHandler = createUseInstanceEventHandler(registryContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}