{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { SimpleTreeView, SimpleTreeViewRoot } from '../SimpleTreeView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\nconst TreeViewRoot = styled(SimpleTreeViewRoot, {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nlet warnedOnce = false;\nconst warn = () => {\n  if (!warnedOnce) {\n    console.warn(['MUI X: The TreeView component was renamed SimpleTreeView.', 'The component with the old naming will be removed in the version v8.0.0.', '', \"You should use `import { SimpleTreeView } from '@mui/x-tree-view'`\", \"or `import { SimpleTreeView } from '@mui/x-tree-view/TreeView'`\"].join('\\n'));\n    warnedOnce = true;\n  }\n};\n\n/**\n * This component has been deprecated in favor of the new `SimpleTreeView` component.\n * You can have a look at how to migrate to the new component in the v7 [migration guide](https://mui.com/x/migration/migration-tree-view-v6/#use-simpletreeview-instead-of-treeview)\n *\n * Demos:\n *\n * - [Tree View](https://mui.com/x/react-tree-view/)\n *\n * API:\n *\n * - [TreeView API](https://mui.com/x/api/tree-view/tree-view/)\n *\n * @deprecated\n */\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n    warn();\n  }\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n  const classes = useUtilityClasses(props);\n  return /*#__PURE__*/_jsx(SimpleTreeView, _extends({}, props, {\n    ref: ref,\n    classes: classes,\n    slots: _extends({\n      root: TreeViewRoot\n    }, props.slots)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The ref object that allows Tree View manipulation. Can be instantiated with `useTreeViewApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.shape({\n      focusItem: PropTypes.func.isRequired,\n      getItem: PropTypes.func.isRequired\n    })\n  }),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Expanded item ids.\n   * Used when the item's expansion is not controlled.\n   * @default []\n   */\n  defaultExpandedItems: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Selected item ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelectedItems: PropTypes.any,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n  /**\n   * Expanded item ids.\n   * Used when the item's expansion is controlled.\n   */\n  expandedItems: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} itemIds The ids of the expanded items.\n   */\n  onExpandedItemsChange: PropTypes.func,\n  /**\n   * Callback fired when a tree item is expanded or collapsed.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} itemId The itemId of the modified item.\n   * @param {array} isExpanded `true` if the item has just been expanded, `false` if it has just been collapsed.\n   */\n  onItemExpansionToggle: PropTypes.func,\n  /**\n   * Callback fired when tree items are focused.\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} itemId The id of the focused item.\n   * @param {string} value of the focused item.\n   */\n  onItemFocus: PropTypes.func,\n  /**\n   * Callback fired when a tree item is selected or deselected.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} itemId The itemId of the modified item.\n   * @param {array} isSelected `true` if the item has just been selected, `false` if it has just been deselected.\n   */\n  onItemSelectionToggle: PropTypes.func,\n  /**\n   * Callback fired when tree items are selected/deselected.\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} itemIds The ids of the selected items.\n   * When `multiSelect` is `true`, this is an array of strings; when false (default) a string.\n   */\n  onSelectedItemsChange: PropTypes.func,\n  /**\n   * Selected item ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selectedItems: PropTypes.any,\n  /**\n   * The props used for each component slot.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport { TreeView };","map":{"version":3,"names":["_extends","React","PropTypes","styled","useThemeProps","composeClasses","getTreeViewUtilityClass","SimpleTreeView","SimpleTreeViewRoot","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","TreeViewRoot","name","slot","overridesResolver","props","styles","warnedOnce","warn","console","join","TreeView","forwardRef","inProps","ref","process","env","NODE_ENV","propTypes","apiRef","shape","current","focusItem","func","isRequired","getItem","children","node","object","className","string","defaultExpandedItems","arrayOf","defaultSelectedItems","any","disabledItemsFocusable","bool","disableSelection","expandedItems","id","multiSelect","onExpandedItemsChange","onItemExpansionToggle","onItemFocus","onItemSelectionToggle","onSelectedItemsChange","selectedItems","slotProps","sx","oneOfType"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/TreeView/TreeView.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { SimpleTreeView, SimpleTreeViewRoot } from '../SimpleTreeView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\nconst TreeViewRoot = styled(SimpleTreeViewRoot, {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nlet warnedOnce = false;\nconst warn = () => {\n  if (!warnedOnce) {\n    console.warn(['MUI X: The TreeView component was renamed SimpleTreeView.', 'The component with the old naming will be removed in the version v8.0.0.', '', \"You should use `import { SimpleTreeView } from '@mui/x-tree-view'`\", \"or `import { SimpleTreeView } from '@mui/x-tree-view/TreeView'`\"].join('\\n'));\n    warnedOnce = true;\n  }\n};\n\n/**\n * This component has been deprecated in favor of the new `SimpleTreeView` component.\n * You can have a look at how to migrate to the new component in the v7 [migration guide](https://mui.com/x/migration/migration-tree-view-v6/#use-simpletreeview-instead-of-treeview)\n *\n * Demos:\n *\n * - [Tree View](https://mui.com/x/react-tree-view/)\n *\n * API:\n *\n * - [TreeView API](https://mui.com/x/api/tree-view/tree-view/)\n *\n * @deprecated\n */\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n    warn();\n  }\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n  const classes = useUtilityClasses(props);\n  return /*#__PURE__*/_jsx(SimpleTreeView, _extends({}, props, {\n    ref: ref,\n    classes: classes,\n    slots: _extends({\n      root: TreeViewRoot\n    }, props.slots)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The ref object that allows Tree View manipulation. Can be instantiated with `useTreeViewApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.shape({\n      focusItem: PropTypes.func.isRequired,\n      getItem: PropTypes.func.isRequired\n    })\n  }),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Expanded item ids.\n   * Used when the item's expansion is not controlled.\n   * @default []\n   */\n  defaultExpandedItems: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Selected item ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelectedItems: PropTypes.any,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n  /**\n   * Expanded item ids.\n   * Used when the item's expansion is controlled.\n   */\n  expandedItems: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} itemIds The ids of the expanded items.\n   */\n  onExpandedItemsChange: PropTypes.func,\n  /**\n   * Callback fired when a tree item is expanded or collapsed.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} itemId The itemId of the modified item.\n   * @param {array} isExpanded `true` if the item has just been expanded, `false` if it has just been collapsed.\n   */\n  onItemExpansionToggle: PropTypes.func,\n  /**\n   * Callback fired when tree items are focused.\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} itemId The id of the focused item.\n   * @param {string} value of the focused item.\n   */\n  onItemFocus: PropTypes.func,\n  /**\n   * Callback fired when a tree item is selected or deselected.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} itemId The itemId of the modified item.\n   * @param {array} isSelected `true` if the item has just been selected, `false` if it has just been deselected.\n   */\n  onItemSelectionToggle: PropTypes.func,\n  /**\n   * Callback fired when tree items are selected/deselected.\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} itemIds The ids of the selected items.\n   * When `multiSelect` is `true`, this is an array of strings; when false (default) a string.\n   */\n  onSelectedItemsChange: PropTypes.func,\n  /**\n   * Selected item ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selectedItems: PropTypes.any,\n  /**\n   * The props used for each component slot.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport { TreeView };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}