{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { populateInstance, populatePublicAPI } from '../../useTreeView/useTreeView.utils';\nimport { publishTreeViewEvent } from '../../utils/publishTreeViewEvent';\nconst updateNodesState = ({\n  items,\n  isItemDisabled,\n  getItemLabel,\n  getItemId\n}) => {\n  const nodeMap = {};\n  const itemMap = {};\n  const processItem = (item, index, parentId) => {\n    const id = getItemId ? getItemId(item) : item.id;\n    if (id == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', 'An item was provided without id in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    if (nodeMap[id] != null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', `Tow items were provided with the same id in the \\`items\\` prop: \"${id}\"`].join('\\n'));\n    }\n    const label = getItemLabel ? getItemLabel(item) : item.label;\n    if (label == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a `label` property.', 'Alternatively, you can use the `getItemLabel` prop to specify a custom label for each item.', 'An item was provided without label in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    nodeMap[id] = {\n      id,\n      label,\n      index,\n      parentId,\n      idAttribute: undefined,\n      expandable: !!item.children?.length,\n      disabled: isItemDisabled ? isItemDisabled(item) : false\n    };\n    itemMap[id] = item;\n    return {\n      id,\n      children: item.children?.map((child, childIndex) => processItem(child, childIndex, id))\n    };\n  };\n  const nodeTree = items.map((item, itemIndex) => processItem(item, itemIndex, null));\n  return {\n    nodeMap,\n    nodeTree,\n    itemMap\n  };\n};\nexport const useTreeViewNodes = ({\n  instance,\n  publicAPI,\n  params,\n  state,\n  setState\n}) => {\n  const getNode = React.useCallback(itemId => state.nodes.nodeMap[itemId], [state.nodes.nodeMap]);\n  const getItem = React.useCallback(itemId => state.nodes.itemMap[itemId], [state.nodes.itemMap]);\n  const isNodeDisabled = React.useCallback(itemId => {\n    if (itemId == null) {\n      return false;\n    }\n    let item = instance.getNode(itemId);\n\n    // This can be called before the item has been added to the node map.\n    if (!item) {\n      return false;\n    }\n    if (item.disabled) {\n      return true;\n    }\n    while (item.parentId != null) {\n      item = instance.getNode(item.parentId);\n      if (item.disabled) {\n        return true;\n      }\n    }\n    return false;\n  }, [instance]);\n  const getChildrenIds = React.useCallback(itemId => Object.values(state.nodes.nodeMap).filter(item => item.parentId === itemId).sort((a, b) => a.index - b.index).map(child => child.id), [state.nodes.nodeMap]);\n  const getNavigableChildrenIds = itemId => {\n    let childrenIds = instance.getChildrenIds(itemId);\n    if (!params.disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(item => !instance.isNodeDisabled(item));\n    }\n    return childrenIds;\n  };\n  React.useEffect(() => {\n    setState(prevState => {\n      const newState = updateNodesState({\n        items: params.items,\n        isItemDisabled: params.isItemDisabled,\n        getItemId: params.getItemId,\n        getItemLabel: params.getItemLabel\n      });\n      Object.values(prevState.nodes.nodeMap).forEach(node => {\n        if (!newState.nodeMap[node.id]) {\n          publishTreeViewEvent(instance, 'removeNode', {\n            id: node.id\n          });\n        }\n      });\n      return _extends({}, prevState, {\n        nodes: newState\n      });\n    });\n  }, [instance, setState, params.items, params.isItemDisabled, params.getItemId, params.getItemLabel]);\n  const getNodesToRender = () => {\n    const getPropsFromItemId = ({\n      id,\n      children\n    }) => {\n      const node = state.nodes.nodeMap[id];\n      return {\n        label: node.label,\n        itemId: node.id,\n        id: node.idAttribute,\n        children: children?.map(getPropsFromItemId)\n      };\n    };\n    return state.nodes.nodeTree.map(getPropsFromItemId);\n  };\n  populateInstance(instance, {\n    getNode,\n    getItem,\n    getNodesToRender,\n    getChildrenIds,\n    getNavigableChildrenIds,\n    isNodeDisabled\n  });\n  populatePublicAPI(publicAPI, {\n    getItem\n  });\n  return {\n    contextValue: {\n      disabledItemsFocusable: params.disabledItemsFocusable\n    }\n  };\n};\nuseTreeViewNodes.getInitialState = params => ({\n  nodes: updateNodesState({\n    items: params.items,\n    isItemDisabled: params.isItemDisabled,\n    getItemId: params.getItemId,\n    getItemLabel: params.getItemLabel\n  })\n});\nuseTreeViewNodes.getDefaultizedParams = params => _extends({}, params, {\n  disabledItemsFocusable: params.disabledItemsFocusable ?? false\n});\nuseTreeViewNodes.params = {\n  disabledItemsFocusable: true,\n  items: true,\n  isItemDisabled: true,\n  getItemLabel: true,\n  getItemId: true\n};","map":{"version":3,"names":["_extends","React","populateInstance","populatePublicAPI","publishTreeViewEvent","updateNodesState","items","isItemDisabled","getItemLabel","getItemId","nodeMap","itemMap","processItem","item","index","parentId","id","Error","JSON","stringify","join","label","idAttribute","undefined","expandable","children","length","disabled","map","child","childIndex","nodeTree","itemIndex","useTreeViewNodes","instance","publicAPI","params","state","setState","getNode","useCallback","itemId","nodes","getItem","isNodeDisabled","getChildrenIds","Object","values","filter","sort","a","b","getNavigableChildrenIds","childrenIds","disabledItemsFocusable","useEffect","prevState","newState","forEach","node","getNodesToRender","getPropsFromItemId","contextValue","getInitialState","getDefaultizedParams"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/plugins/useTreeViewNodes/useTreeViewNodes.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { populateInstance, populatePublicAPI } from '../../useTreeView/useTreeView.utils';\nimport { publishTreeViewEvent } from '../../utils/publishTreeViewEvent';\nconst updateNodesState = ({\n  items,\n  isItemDisabled,\n  getItemLabel,\n  getItemId\n}) => {\n  const nodeMap = {};\n  const itemMap = {};\n  const processItem = (item, index, parentId) => {\n    const id = getItemId ? getItemId(item) : item.id;\n    if (id == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', 'An item was provided without id in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    if (nodeMap[id] != null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', `Tow items were provided with the same id in the \\`items\\` prop: \"${id}\"`].join('\\n'));\n    }\n    const label = getItemLabel ? getItemLabel(item) : item.label;\n    if (label == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a `label` property.', 'Alternatively, you can use the `getItemLabel` prop to specify a custom label for each item.', 'An item was provided without label in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    nodeMap[id] = {\n      id,\n      label,\n      index,\n      parentId,\n      idAttribute: undefined,\n      expandable: !!item.children?.length,\n      disabled: isItemDisabled ? isItemDisabled(item) : false\n    };\n    itemMap[id] = item;\n    return {\n      id,\n      children: item.children?.map((child, childIndex) => processItem(child, childIndex, id))\n    };\n  };\n  const nodeTree = items.map((item, itemIndex) => processItem(item, itemIndex, null));\n  return {\n    nodeMap,\n    nodeTree,\n    itemMap\n  };\n};\nexport const useTreeViewNodes = ({\n  instance,\n  publicAPI,\n  params,\n  state,\n  setState\n}) => {\n  const getNode = React.useCallback(itemId => state.nodes.nodeMap[itemId], [state.nodes.nodeMap]);\n  const getItem = React.useCallback(itemId => state.nodes.itemMap[itemId], [state.nodes.itemMap]);\n  const isNodeDisabled = React.useCallback(itemId => {\n    if (itemId == null) {\n      return false;\n    }\n    let item = instance.getNode(itemId);\n\n    // This can be called before the item has been added to the node map.\n    if (!item) {\n      return false;\n    }\n    if (item.disabled) {\n      return true;\n    }\n    while (item.parentId != null) {\n      item = instance.getNode(item.parentId);\n      if (item.disabled) {\n        return true;\n      }\n    }\n    return false;\n  }, [instance]);\n  const getChildrenIds = React.useCallback(itemId => Object.values(state.nodes.nodeMap).filter(item => item.parentId === itemId).sort((a, b) => a.index - b.index).map(child => child.id), [state.nodes.nodeMap]);\n  const getNavigableChildrenIds = itemId => {\n    let childrenIds = instance.getChildrenIds(itemId);\n    if (!params.disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(item => !instance.isNodeDisabled(item));\n    }\n    return childrenIds;\n  };\n  React.useEffect(() => {\n    setState(prevState => {\n      const newState = updateNodesState({\n        items: params.items,\n        isItemDisabled: params.isItemDisabled,\n        getItemId: params.getItemId,\n        getItemLabel: params.getItemLabel\n      });\n      Object.values(prevState.nodes.nodeMap).forEach(node => {\n        if (!newState.nodeMap[node.id]) {\n          publishTreeViewEvent(instance, 'removeNode', {\n            id: node.id\n          });\n        }\n      });\n      return _extends({}, prevState, {\n        nodes: newState\n      });\n    });\n  }, [instance, setState, params.items, params.isItemDisabled, params.getItemId, params.getItemLabel]);\n  const getNodesToRender = () => {\n    const getPropsFromItemId = ({\n      id,\n      children\n    }) => {\n      const node = state.nodes.nodeMap[id];\n      return {\n        label: node.label,\n        itemId: node.id,\n        id: node.idAttribute,\n        children: children?.map(getPropsFromItemId)\n      };\n    };\n    return state.nodes.nodeTree.map(getPropsFromItemId);\n  };\n  populateInstance(instance, {\n    getNode,\n    getItem,\n    getNodesToRender,\n    getChildrenIds,\n    getNavigableChildrenIds,\n    isNodeDisabled\n  });\n  populatePublicAPI(publicAPI, {\n    getItem\n  });\n  return {\n    contextValue: {\n      disabledItemsFocusable: params.disabledItemsFocusable\n    }\n  };\n};\nuseTreeViewNodes.getInitialState = params => ({\n  nodes: updateNodesState({\n    items: params.items,\n    isItemDisabled: params.isItemDisabled,\n    getItemId: params.getItemId,\n    getItemLabel: params.getItemLabel\n  })\n});\nuseTreeViewNodes.getDefaultizedParams = params => _extends({}, params, {\n  disabledItemsFocusable: params.disabledItemsFocusable ?? false\n});\nuseTreeViewNodes.params = {\n  disabledItemsFocusable: true,\n  items: true,\n  isItemDisabled: true,\n  getItemLabel: true,\n  getItemId: true\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}