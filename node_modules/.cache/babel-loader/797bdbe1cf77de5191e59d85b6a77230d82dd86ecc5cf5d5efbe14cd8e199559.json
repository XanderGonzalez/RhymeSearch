{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { populateInstance, populatePublicAPI } from '../../useTreeView/useTreeView.utils';\nimport { publishTreeViewEvent } from '../../utils/publishTreeViewEvent';\nconst updateNodesState = _ref => {\n  let {\n    items,\n    isItemDisabled,\n    getItemLabel,\n    getItemId\n  } = _ref;\n  const nodeMap = {};\n  const itemMap = {};\n  const processItem = (item, index, parentId) => {\n    var _item$children, _item$children2;\n    const id = getItemId ? getItemId(item) : item.id;\n    if (id == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', 'An item was provided without id in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    if (nodeMap[id] != null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', \"Tow items were provided with the same id in the `items` prop: \\\"\".concat(id, \"\\\"\")].join('\\n'));\n    }\n    const label = getItemLabel ? getItemLabel(item) : item.label;\n    if (label == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a `label` property.', 'Alternatively, you can use the `getItemLabel` prop to specify a custom label for each item.', 'An item was provided without label in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    nodeMap[id] = {\n      id,\n      label,\n      index,\n      parentId,\n      idAttribute: undefined,\n      expandable: !!((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length),\n      disabled: isItemDisabled ? isItemDisabled(item) : false\n    };\n    itemMap[id] = item;\n    return {\n      id,\n      children: (_item$children2 = item.children) === null || _item$children2 === void 0 ? void 0 : _item$children2.map((child, childIndex) => processItem(child, childIndex, id))\n    };\n  };\n  const nodeTree = items.map((item, itemIndex) => processItem(item, itemIndex, null));\n  return {\n    nodeMap,\n    nodeTree,\n    itemMap\n  };\n};\nexport const useTreeViewNodes = _ref2 => {\n  let {\n    instance,\n    publicAPI,\n    params,\n    state,\n    setState\n  } = _ref2;\n  const getNode = React.useCallback(itemId => state.nodes.nodeMap[itemId], [state.nodes.nodeMap]);\n  const getItem = React.useCallback(itemId => state.nodes.itemMap[itemId], [state.nodes.itemMap]);\n  const isNodeDisabled = React.useCallback(itemId => {\n    if (itemId == null) {\n      return false;\n    }\n    let item = instance.getNode(itemId);\n\n    // This can be called before the item has been added to the node map.\n    if (!item) {\n      return false;\n    }\n    if (item.disabled) {\n      return true;\n    }\n    while (item.parentId != null) {\n      item = instance.getNode(item.parentId);\n      if (item.disabled) {\n        return true;\n      }\n    }\n    return false;\n  }, [instance]);\n  const getChildrenIds = React.useCallback(itemId => Object.values(state.nodes.nodeMap).filter(item => item.parentId === itemId).sort((a, b) => a.index - b.index).map(child => child.id), [state.nodes.nodeMap]);\n  const getNavigableChildrenIds = itemId => {\n    let childrenIds = instance.getChildrenIds(itemId);\n    if (!params.disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(item => !instance.isNodeDisabled(item));\n    }\n    return childrenIds;\n  };\n  React.useEffect(() => {\n    setState(prevState => {\n      const newState = updateNodesState({\n        items: params.items,\n        isItemDisabled: params.isItemDisabled,\n        getItemId: params.getItemId,\n        getItemLabel: params.getItemLabel\n      });\n      Object.values(prevState.nodes.nodeMap).forEach(node => {\n        if (!newState.nodeMap[node.id]) {\n          publishTreeViewEvent(instance, 'removeNode', {\n            id: node.id\n          });\n        }\n      });\n      return _extends({}, prevState, {\n        nodes: newState\n      });\n    });\n  }, [instance, setState, params.items, params.isItemDisabled, params.getItemId, params.getItemLabel]);\n  const getNodesToRender = () => {\n    const getPropsFromItemId = _ref3 => {\n      let {\n        id,\n        children\n      } = _ref3;\n      const node = state.nodes.nodeMap[id];\n      return {\n        label: node.label,\n        itemId: node.id,\n        id: node.idAttribute,\n        children: children === null || children === void 0 ? void 0 : children.map(getPropsFromItemId)\n      };\n    };\n    return state.nodes.nodeTree.map(getPropsFromItemId);\n  };\n  populateInstance(instance, {\n    getNode,\n    getItem,\n    getNodesToRender,\n    getChildrenIds,\n    getNavigableChildrenIds,\n    isNodeDisabled\n  });\n  populatePublicAPI(publicAPI, {\n    getItem\n  });\n  return {\n    contextValue: {\n      disabledItemsFocusable: params.disabledItemsFocusable\n    }\n  };\n};\nuseTreeViewNodes.getInitialState = params => ({\n  nodes: updateNodesState({\n    items: params.items,\n    isItemDisabled: params.isItemDisabled,\n    getItemId: params.getItemId,\n    getItemLabel: params.getItemLabel\n  })\n});\nuseTreeViewNodes.getDefaultizedParams = params => {\n  var _params$disabledItems;\n  return _extends({}, params, {\n    disabledItemsFocusable: (_params$disabledItems = params.disabledItemsFocusable) !== null && _params$disabledItems !== void 0 ? _params$disabledItems : false\n  });\n};\nuseTreeViewNodes.params = {\n  disabledItemsFocusable: true,\n  items: true,\n  isItemDisabled: true,\n  getItemLabel: true,\n  getItemId: true\n};","map":{"version":3,"names":["_extends","React","populateInstance","populatePublicAPI","publishTreeViewEvent","updateNodesState","_ref","items","isItemDisabled","getItemLabel","getItemId","nodeMap","itemMap","processItem","item","index","parentId","_item$children","_item$children2","id","Error","JSON","stringify","join","concat","label","idAttribute","undefined","expandable","children","length","disabled","map","child","childIndex","nodeTree","itemIndex","useTreeViewNodes","_ref2","instance","publicAPI","params","state","setState","getNode","useCallback","itemId","nodes","getItem","isNodeDisabled","getChildrenIds","Object","values","filter","sort","a","b","getNavigableChildrenIds","childrenIds","disabledItemsFocusable","useEffect","prevState","newState","forEach","node","getNodesToRender","getPropsFromItemId","_ref3","contextValue","getInitialState","getDefaultizedParams","_params$disabledItems"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/plugins/useTreeViewNodes/useTreeViewNodes.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { populateInstance, populatePublicAPI } from '../../useTreeView/useTreeView.utils';\nimport { publishTreeViewEvent } from '../../utils/publishTreeViewEvent';\nconst updateNodesState = ({\n  items,\n  isItemDisabled,\n  getItemLabel,\n  getItemId\n}) => {\n  const nodeMap = {};\n  const itemMap = {};\n  const processItem = (item, index, parentId) => {\n    const id = getItemId ? getItemId(item) : item.id;\n    if (id == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', 'An item was provided without id in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    if (nodeMap[id] != null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', `Tow items were provided with the same id in the \\`items\\` prop: \"${id}\"`].join('\\n'));\n    }\n    const label = getItemLabel ? getItemLabel(item) : item.label;\n    if (label == null) {\n      throw new Error(['MUI X: The Tree View component requires all items to have a `label` property.', 'Alternatively, you can use the `getItemLabel` prop to specify a custom label for each item.', 'An item was provided without label in the `items` prop:', JSON.stringify(item)].join('\\n'));\n    }\n    nodeMap[id] = {\n      id,\n      label,\n      index,\n      parentId,\n      idAttribute: undefined,\n      expandable: !!item.children?.length,\n      disabled: isItemDisabled ? isItemDisabled(item) : false\n    };\n    itemMap[id] = item;\n    return {\n      id,\n      children: item.children?.map((child, childIndex) => processItem(child, childIndex, id))\n    };\n  };\n  const nodeTree = items.map((item, itemIndex) => processItem(item, itemIndex, null));\n  return {\n    nodeMap,\n    nodeTree,\n    itemMap\n  };\n};\nexport const useTreeViewNodes = ({\n  instance,\n  publicAPI,\n  params,\n  state,\n  setState\n}) => {\n  const getNode = React.useCallback(itemId => state.nodes.nodeMap[itemId], [state.nodes.nodeMap]);\n  const getItem = React.useCallback(itemId => state.nodes.itemMap[itemId], [state.nodes.itemMap]);\n  const isNodeDisabled = React.useCallback(itemId => {\n    if (itemId == null) {\n      return false;\n    }\n    let item = instance.getNode(itemId);\n\n    // This can be called before the item has been added to the node map.\n    if (!item) {\n      return false;\n    }\n    if (item.disabled) {\n      return true;\n    }\n    while (item.parentId != null) {\n      item = instance.getNode(item.parentId);\n      if (item.disabled) {\n        return true;\n      }\n    }\n    return false;\n  }, [instance]);\n  const getChildrenIds = React.useCallback(itemId => Object.values(state.nodes.nodeMap).filter(item => item.parentId === itemId).sort((a, b) => a.index - b.index).map(child => child.id), [state.nodes.nodeMap]);\n  const getNavigableChildrenIds = itemId => {\n    let childrenIds = instance.getChildrenIds(itemId);\n    if (!params.disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(item => !instance.isNodeDisabled(item));\n    }\n    return childrenIds;\n  };\n  React.useEffect(() => {\n    setState(prevState => {\n      const newState = updateNodesState({\n        items: params.items,\n        isItemDisabled: params.isItemDisabled,\n        getItemId: params.getItemId,\n        getItemLabel: params.getItemLabel\n      });\n      Object.values(prevState.nodes.nodeMap).forEach(node => {\n        if (!newState.nodeMap[node.id]) {\n          publishTreeViewEvent(instance, 'removeNode', {\n            id: node.id\n          });\n        }\n      });\n      return _extends({}, prevState, {\n        nodes: newState\n      });\n    });\n  }, [instance, setState, params.items, params.isItemDisabled, params.getItemId, params.getItemLabel]);\n  const getNodesToRender = () => {\n    const getPropsFromItemId = ({\n      id,\n      children\n    }) => {\n      const node = state.nodes.nodeMap[id];\n      return {\n        label: node.label,\n        itemId: node.id,\n        id: node.idAttribute,\n        children: children?.map(getPropsFromItemId)\n      };\n    };\n    return state.nodes.nodeTree.map(getPropsFromItemId);\n  };\n  populateInstance(instance, {\n    getNode,\n    getItem,\n    getNodesToRender,\n    getChildrenIds,\n    getNavigableChildrenIds,\n    isNodeDisabled\n  });\n  populatePublicAPI(publicAPI, {\n    getItem\n  });\n  return {\n    contextValue: {\n      disabledItemsFocusable: params.disabledItemsFocusable\n    }\n  };\n};\nuseTreeViewNodes.getInitialState = params => ({\n  nodes: updateNodesState({\n    items: params.items,\n    isItemDisabled: params.isItemDisabled,\n    getItemId: params.getItemId,\n    getItemLabel: params.getItemLabel\n  })\n});\nuseTreeViewNodes.getDefaultizedParams = params => _extends({}, params, {\n  disabledItemsFocusable: params.disabledItemsFocusable ?? false\n});\nuseTreeViewNodes.params = {\n  disabledItemsFocusable: true,\n  items: true,\n  isItemDisabled: true,\n  getItemLabel: true,\n  getItemId: true\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}