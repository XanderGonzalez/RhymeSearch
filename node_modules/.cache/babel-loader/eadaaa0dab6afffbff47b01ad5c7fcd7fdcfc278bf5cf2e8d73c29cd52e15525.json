{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps, useSlotProps } from '@mui/base/utils';\nimport { useTreeViewContext } from '../internals/TreeViewProvider/useTreeViewContext';\nimport { TreeViewCollapseIcon, TreeViewExpandIcon } from '../icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction TreeItem2Icon(props) {\n  const {\n    slots,\n    slotProps,\n    status\n  } = props;\n  const context = useTreeViewContext();\n  const contextIcons = _extends({}, context.icons.slots, {\n    expandIcon: context.icons.slots.expandIcon ?? TreeViewExpandIcon,\n    collapseIcon: context.icons.slots.collapseIcon ?? TreeViewCollapseIcon\n  });\n  const contextIconProps = context.icons.slotProps;\n  let iconName;\n  if (slots?.icon) {\n    iconName = 'icon';\n  } else if (status.expandable) {\n    if (status.expanded) {\n      iconName = 'collapseIcon';\n    } else {\n      iconName = 'expandIcon';\n    }\n  } else {\n    iconName = 'endIcon';\n  }\n  const Icon = slots?.[iconName] ?? contextIcons[iconName];\n  const iconProps = useSlotProps({\n    elementType: Icon,\n    externalSlotProps: tempOwnerState => _extends({}, resolveComponentProps(contextIconProps[iconName], tempOwnerState), resolveComponentProps(slotProps?.[iconName], tempOwnerState)),\n    // TODO: Add proper ownerState\n    ownerState: {}\n  });\n  if (!Icon) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(Icon, _extends({}, iconProps));\n}\nprocess.env.NODE_ENV !== \"production\" ? TreeItem2Icon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  status: PropTypes.shape({\n    disabled: PropTypes.bool.isRequired,\n    expandable: PropTypes.bool.isRequired,\n    expanded: PropTypes.bool.isRequired,\n    focused: PropTypes.bool.isRequired,\n    selected: PropTypes.bool.isRequired\n  }).isRequired\n} : void 0;\nexport { TreeItem2Icon };","map":{"version":3,"names":["_extends","React","PropTypes","resolveComponentProps","useSlotProps","useTreeViewContext","TreeViewCollapseIcon","TreeViewExpandIcon","jsx","_jsx","TreeItem2Icon","props","slots","slotProps","status","context","contextIcons","icons","expandIcon","collapseIcon","contextIconProps","iconName","icon","expandable","expanded","Icon","iconProps","elementType","externalSlotProps","tempOwnerState","ownerState","process","env","NODE_ENV","propTypes","object","shape","disabled","bool","isRequired","focused","selected"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/TreeItem2Icon/TreeItem2Icon.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps, useSlotProps } from '@mui/base/utils';\nimport { useTreeViewContext } from '../internals/TreeViewProvider/useTreeViewContext';\nimport { TreeViewCollapseIcon, TreeViewExpandIcon } from '../icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction TreeItem2Icon(props) {\n  const {\n    slots,\n    slotProps,\n    status\n  } = props;\n  const context = useTreeViewContext();\n  const contextIcons = _extends({}, context.icons.slots, {\n    expandIcon: context.icons.slots.expandIcon ?? TreeViewExpandIcon,\n    collapseIcon: context.icons.slots.collapseIcon ?? TreeViewCollapseIcon\n  });\n  const contextIconProps = context.icons.slotProps;\n  let iconName;\n  if (slots?.icon) {\n    iconName = 'icon';\n  } else if (status.expandable) {\n    if (status.expanded) {\n      iconName = 'collapseIcon';\n    } else {\n      iconName = 'expandIcon';\n    }\n  } else {\n    iconName = 'endIcon';\n  }\n  const Icon = slots?.[iconName] ?? contextIcons[iconName];\n  const iconProps = useSlotProps({\n    elementType: Icon,\n    externalSlotProps: tempOwnerState => _extends({}, resolveComponentProps(contextIconProps[iconName], tempOwnerState), resolveComponentProps(slotProps?.[iconName], tempOwnerState)),\n    // TODO: Add proper ownerState\n    ownerState: {}\n  });\n  if (!Icon) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(Icon, _extends({}, iconProps));\n}\nprocess.env.NODE_ENV !== \"production\" ? TreeItem2Icon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  status: PropTypes.shape({\n    disabled: PropTypes.bool.isRequired,\n    expandable: PropTypes.bool.isRequired,\n    expanded: PropTypes.bool.isRequired,\n    focused: PropTypes.bool.isRequired,\n    selected: PropTypes.bool.isRequired\n  }).isRequired\n} : void 0;\nexport { TreeItem2Icon };"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,qBAAqB,EAAEC,YAAY,QAAQ,iBAAiB;AACrE,SAASC,kBAAkB,QAAQ,kDAAkD;AACrF,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,UAAU;AACnE,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5B,MAAM;IACJC,KAAK;IACLC,SAAS;IACTC;EACF,CAAC,GAAGH,KAAK;EACT,MAAMI,OAAO,GAAGV,kBAAkB,CAAC,CAAC;EACpC,MAAMW,YAAY,GAAGhB,QAAQ,CAAC,CAAC,CAAC,EAAEe,OAAO,CAACE,KAAK,CAACL,KAAK,EAAE;IACrDM,UAAU,EAAEH,OAAO,CAACE,KAAK,CAACL,KAAK,CAACM,UAAU,IAAIX,kBAAkB;IAChEY,YAAY,EAAEJ,OAAO,CAACE,KAAK,CAACL,KAAK,CAACO,YAAY,IAAIb;EACpD,CAAC,CAAC;EACF,MAAMc,gBAAgB,GAAGL,OAAO,CAACE,KAAK,CAACJ,SAAS;EAChD,IAAIQ,QAAQ;EACZ,IAAIT,KAAK,EAAEU,IAAI,EAAE;IACfD,QAAQ,GAAG,MAAM;EACnB,CAAC,MAAM,IAAIP,MAAM,CAACS,UAAU,EAAE;IAC5B,IAAIT,MAAM,CAACU,QAAQ,EAAE;MACnBH,QAAQ,GAAG,cAAc;IAC3B,CAAC,MAAM;MACLA,QAAQ,GAAG,YAAY;IACzB;EACF,CAAC,MAAM;IACLA,QAAQ,GAAG,SAAS;EACtB;EACA,MAAMI,IAAI,GAAGb,KAAK,GAAGS,QAAQ,CAAC,IAAIL,YAAY,CAACK,QAAQ,CAAC;EACxD,MAAMK,SAAS,GAAGtB,YAAY,CAAC;IAC7BuB,WAAW,EAAEF,IAAI;IACjBG,iBAAiB,EAAEC,cAAc,IAAI7B,QAAQ,CAAC,CAAC,CAAC,EAAEG,qBAAqB,CAACiB,gBAAgB,CAACC,QAAQ,CAAC,EAAEQ,cAAc,CAAC,EAAE1B,qBAAqB,CAACU,SAAS,GAAGQ,QAAQ,CAAC,EAAEQ,cAAc,CAAC,CAAC;IAClL;IACAC,UAAU,EAAE,CAAC;EACf,CAAC,CAAC;EACF,IAAI,CAACL,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EACA,OAAO,aAAahB,IAAI,CAACgB,IAAI,EAAEzB,QAAQ,CAAC,CAAC,CAAC,EAAE0B,SAAS,CAAC,CAAC;AACzD;AACAK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGvB,aAAa,CAACwB,SAAS,GAAG;EAChE;EACA;EACA;EACA;EACA;AACF;AACA;AACA;EACErB,SAAS,EAAEX,SAAS,CAACiC,MAAM;EAC3B;AACF;AACA;AACA;EACEvB,KAAK,EAAEV,SAAS,CAACiC,MAAM;EACvBrB,MAAM,EAAEZ,SAAS,CAACkC,KAAK,CAAC;IACtBC,QAAQ,EAAEnC,SAAS,CAACoC,IAAI,CAACC,UAAU;IACnChB,UAAU,EAAErB,SAAS,CAACoC,IAAI,CAACC,UAAU;IACrCf,QAAQ,EAAEtB,SAAS,CAACoC,IAAI,CAACC,UAAU;IACnCC,OAAO,EAAEtC,SAAS,CAACoC,IAAI,CAACC,UAAU;IAClCE,QAAQ,EAAEvC,SAAS,CAACoC,IAAI,CAACC;EAC3B,CAAC,CAAC,CAACA;AACL,CAAC,GAAG,KAAK,CAAC;AACV,SAAS7B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}