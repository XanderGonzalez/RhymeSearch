{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\n/**\n * Implements the same behavior as `useControlled` but for several models.\n * The controlled models are never stored in the state and the state is only updated if the model is not controlled.\n */\nexport const useTreeViewModels = (plugins, props) => {\n  const modelsRef = React.useRef({});\n  const [modelsState, setModelsState] = React.useState(() => {\n    const initialState = {};\n    plugins.forEach(plugin => {\n      if (plugin.models) {\n        Object.entries(plugin.models).forEach(([modelName, modelInitializer]) => {\n          modelsRef.current[modelName] = {\n            isControlled: props[modelName] !== undefined,\n            getDefaultValue: modelInitializer.getDefaultValue\n          };\n          initialState[modelName] = modelInitializer.getDefaultValue(props);\n        });\n      }\n    });\n    return initialState;\n  });\n  const models = Object.fromEntries(Object.entries(modelsRef.current).map(([modelName, model]) => {\n    const value = model.isControlled ? props[modelName] : modelsState[modelName];\n    return [modelName, {\n      value,\n      setControlledValue: newValue => {\n        if (!model.isControlled) {\n          setModelsState(prevState => _extends({}, prevState, {\n            [modelName]: newValue\n          }));\n        }\n      }\n    }];\n  }));\n\n  // We know that `modelsRef` do not vary across renders.\n  /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n  if (process.env.NODE_ENV !== 'production') {\n    Object.entries(modelsRef.current).forEach(([modelName, model]) => {\n      const controlled = props[modelName];\n      const newDefaultValue = model.getDefaultValue(props);\n      React.useEffect(() => {\n        if (model.isControlled !== (controlled !== undefined)) {\n          console.error([`MUI X: A component is changing the ${model.isControlled ? '' : 'un'}controlled ${modelName} state of TreeView to be ${model.isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${modelName} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n        }\n      }, [controlled]);\n      const {\n        current: defaultValue\n      } = React.useRef(newDefaultValue);\n      React.useEffect(() => {\n        if (!model.isControlled && defaultValue !== newDefaultValue) {\n          console.error([`MUI X: A component is changing the default ${modelName} state of an uncontrolled TreeView after being initialized. ` + `To suppress this warning opt to use a controlled TreeView.`].join('\\n'));\n        }\n      }, [JSON.stringify(defaultValue)]);\n    });\n  }\n  /* eslint-enable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n\n  return models;\n};","map":{"version":3,"names":["_extends","React","useTreeViewModels","plugins","props","modelsRef","useRef","modelsState","setModelsState","useState","initialState","forEach","plugin","models","Object","entries","modelName","modelInitializer","current","isControlled","undefined","getDefaultValue","fromEntries","map","model","value","setControlledValue","newValue","prevState","process","env","NODE_ENV","controlled","newDefaultValue","useEffect","console","error","join","defaultValue","JSON","stringify"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/useTreeView/useTreeViewModels.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\n/**\n * Implements the same behavior as `useControlled` but for several models.\n * The controlled models are never stored in the state and the state is only updated if the model is not controlled.\n */\nexport const useTreeViewModels = (plugins, props) => {\n  const modelsRef = React.useRef({});\n  const [modelsState, setModelsState] = React.useState(() => {\n    const initialState = {};\n    plugins.forEach(plugin => {\n      if (plugin.models) {\n        Object.entries(plugin.models).forEach(([modelName, modelInitializer]) => {\n          modelsRef.current[modelName] = {\n            isControlled: props[modelName] !== undefined,\n            getDefaultValue: modelInitializer.getDefaultValue\n          };\n          initialState[modelName] = modelInitializer.getDefaultValue(props);\n        });\n      }\n    });\n    return initialState;\n  });\n  const models = Object.fromEntries(Object.entries(modelsRef.current).map(([modelName, model]) => {\n    const value = model.isControlled ? props[modelName] : modelsState[modelName];\n    return [modelName, {\n      value,\n      setControlledValue: newValue => {\n        if (!model.isControlled) {\n          setModelsState(prevState => _extends({}, prevState, {\n            [modelName]: newValue\n          }));\n        }\n      }\n    }];\n  }));\n\n  // We know that `modelsRef` do not vary across renders.\n  /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n  if (process.env.NODE_ENV !== 'production') {\n    Object.entries(modelsRef.current).forEach(([modelName, model]) => {\n      const controlled = props[modelName];\n      const newDefaultValue = model.getDefaultValue(props);\n      React.useEffect(() => {\n        if (model.isControlled !== (controlled !== undefined)) {\n          console.error([`MUI X: A component is changing the ${model.isControlled ? '' : 'un'}controlled ${modelName} state of TreeView to be ${model.isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${modelName} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n        }\n      }, [controlled]);\n      const {\n        current: defaultValue\n      } = React.useRef(newDefaultValue);\n      React.useEffect(() => {\n        if (!model.isControlled && defaultValue !== newDefaultValue) {\n          console.error([`MUI X: A component is changing the default ${modelName} state of an uncontrolled TreeView after being initialized. ` + `To suppress this warning opt to use a controlled TreeView.`].join('\\n'));\n        }\n      }, [JSON.stringify(defaultValue)]);\n    });\n  }\n  /* eslint-enable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\n\n  return models;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}