{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nconst DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nconst noop = () => {};\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render, and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  const index = descendants.findIndex(item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n        element\n      } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(oldItems => {\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n      const index = binaryFindElement(oldItems, element);\n      let newItems;\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        const newItem = _extends({}, other, {\n          element,\n          index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","useEnhancedEffect","jsx","_jsx","binaryFindElement","array","element","start","end","length","middle","Math","floor","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","DescendantContext","createContext","process","env","NODE_ENV","displayName","usePrevious","value","ref","useRef","useEffect","current","noop","useDescendant","descendant","forceUpdate","useState","registerDescendant","unregisterDescendant","descendants","parentId","useContext","index","findIndex","item","previousDescendants","someDescendantsHaveChanged","some","newDescendant","position","undefined","DescendantProvider","props","children","id","items","set","useCallback","_ref","other","oldItems","newItems","newItem","slice","splice","forEach","filter","useMemo","Provider","propTypes","node","string"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/TreeViewProvider/DescendantProvider.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nconst DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nconst noop = () => {};\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render, and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  const index = descendants.findIndex(item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n        element\n      } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(oldItems => {\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n      const index = binaryFindElement(oldItems, element);\n      let newItems;\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        const newItem = _extends({}, other, {\n          element,\n          index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;"],"mappings":"AAAA,OAAOA,6BAA6B,MAAM,yDAAyD;AACnG,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,MAAMC,SAAS,GAAG,CAAC,SAAS,CAAC;AAC7B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,iBAAiB,MAAM,8BAA8B;;AAE5D;AACA;AACA;AACA,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,iBAAiBA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACzC,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,GAAG,GAAGH,KAAK,CAACI,MAAM,GAAG,CAAC;EAC1B,OAAOF,KAAK,IAAIC,GAAG,EAAE;IACnB,MAAME,MAAM,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,KAAK,GAAGC,GAAG,IAAI,CAAC,CAAC;IAC5C,IAAIH,KAAK,CAACK,MAAM,CAAC,CAACJ,OAAO,KAAKA,OAAO,EAAE;MACrC,OAAOI,MAAM;IACf;;IAEA;IACA,IAAIL,KAAK,CAACK,MAAM,CAAC,CAACJ,OAAO,CAACO,uBAAuB,CAACP,OAAO,CAAC,GAAGQ,IAAI,CAACC,2BAA2B,EAAE;MAC7FP,GAAG,GAAGE,MAAM,GAAG,CAAC;IAClB,CAAC,MAAM;MACLH,KAAK,GAAGG,MAAM,GAAG,CAAC;IACpB;EACF;EACA,OAAOH,KAAK;AACd;AACA,MAAMS,iBAAiB,GAAG,aAAajB,KAAK,CAACkB,aAAa,CAAC,CAAC,CAAC,CAAC;AAC9D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCJ,iBAAiB,CAACK,WAAW,GAAG,mBAAmB;AACrD;AACA,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,MAAMC,GAAG,GAAGzB,KAAK,CAAC0B,MAAM,CAAC,IAAI,CAAC;EAC9B1B,KAAK,CAAC2B,SAAS,CAAC,MAAM;IACpBF,GAAG,CAACG,OAAO,GAAGJ,KAAK;EACrB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX,OAAOC,GAAG,CAACG,OAAO;AACpB;AACA,MAAMC,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,UAAU,EAAE;EACxC,MAAM,GAAGC,WAAW,CAAC,GAAGhC,KAAK,CAACiC,QAAQ,CAAC,CAAC;EACxC,MAAM;IACJC,kBAAkB,GAAGL,IAAI;IACzBM,oBAAoB,GAAGN,IAAI;IAC3BO,WAAW,GAAG,EAAE;IAChBC,QAAQ,GAAG;EACb,CAAC,GAAGrC,KAAK,CAACsC,UAAU,CAACrB,iBAAiB,CAAC;;EAEvC;EACA;EACA;EACA;EACA;EACA,MAAMsB,KAAK,GAAGH,WAAW,CAACI,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAClC,OAAO,KAAKwB,UAAU,CAACxB,OAAO,CAAC;EAChF,MAAMmC,mBAAmB,GAAGnB,WAAW,CAACa,WAAW,CAAC;;EAEpD;EACA;EACA;EACA;EACA,MAAMO,0BAA0B,GAAGP,WAAW,CAACQ,IAAI,CAAC,CAACC,aAAa,EAAEC,QAAQ,KAAK;IAC/E,OAAOJ,mBAAmB,IAAIA,mBAAmB,CAACI,QAAQ,CAAC,IAAIJ,mBAAmB,CAACI,QAAQ,CAAC,CAACvC,OAAO,KAAKsC,aAAa,CAACtC,OAAO;EAChI,CAAC,CAAC;;EAEF;EACAL,iBAAiB,CAAC,MAAM;IACtB,IAAI6B,UAAU,CAACxB,OAAO,EAAE;MACtB2B,kBAAkB,CAACpC,QAAQ,CAAC,CAAC,CAAC,EAAEiC,UAAU,EAAE;QAC1CQ;MACF,CAAC,CAAC,CAAC;MACH,OAAO,MAAM;QACXJ,oBAAoB,CAACJ,UAAU,CAACxB,OAAO,CAAC;MAC1C,CAAC;IACH;IACAyB,WAAW,CAAC,CAAC,CAAC,CAAC;IACf,OAAOe,SAAS;EAClB,CAAC,EAAE,CAACb,kBAAkB,EAAEC,oBAAoB,EAAEI,KAAK,EAAEI,0BAA0B,EAAEZ,UAAU,CAAC,CAAC;EAC7F,OAAO;IACLM,QAAQ;IACRE;EACF,CAAC;AACH;AACA,OAAO,SAASS,kBAAkBA,CAACC,KAAK,EAAE;EACxC,MAAM;IACJC,QAAQ;IACRC;EACF,CAAC,GAAGF,KAAK;EACT,MAAM,CAACG,KAAK,EAAEC,GAAG,CAAC,GAAGrD,KAAK,CAACiC,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAMC,kBAAkB,GAAGlC,KAAK,CAACsD,WAAW,CAACC,IAAI,IAAI;IACnD,IAAI;QACAhD;MACF,CAAC,GAAGgD,IAAI;MACRC,KAAK,GAAG3D,6BAA6B,CAAC0D,IAAI,EAAExD,SAAS,CAAC;IACxDsD,GAAG,CAACI,QAAQ,IAAI;MACd,IAAIA,QAAQ,CAAC/C,MAAM,KAAK,CAAC,EAAE;QACzB;QACA,OAAO,CAACZ,QAAQ,CAAC,CAAC,CAAC,EAAE0D,KAAK,EAAE;UAC1BjD,OAAO;UACPgC,KAAK,EAAE;QACT,CAAC,CAAC,CAAC;MACL;MACA,MAAMA,KAAK,GAAGlC,iBAAiB,CAACoD,QAAQ,EAAElD,OAAO,CAAC;MAClD,IAAImD,QAAQ;MACZ,IAAID,QAAQ,CAAClB,KAAK,CAAC,IAAIkB,QAAQ,CAAClB,KAAK,CAAC,CAAChC,OAAO,KAAKA,OAAO,EAAE;QAC1D;QACAmD,QAAQ,GAAGD,QAAQ;MACrB,CAAC,MAAM;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA,MAAME,OAAO,GAAG7D,QAAQ,CAAC,CAAC,CAAC,EAAE0D,KAAK,EAAE;UAClCjD,OAAO;UACPgC;QACF,CAAC,CAAC;;QAEF;QACAmB,QAAQ,GAAGD,QAAQ,CAACG,KAAK,CAAC,CAAC;QAC3BF,QAAQ,CAACG,MAAM,CAACtB,KAAK,EAAE,CAAC,EAAEoB,OAAO,CAAC;MACpC;MACAD,QAAQ,CAACI,OAAO,CAAC,CAACrB,IAAI,EAAEK,QAAQ,KAAK;QACnCL,IAAI,CAACF,KAAK,GAAGO,QAAQ;MACvB,CAAC,CAAC;MACF,OAAOY,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,MAAMvB,oBAAoB,GAAGnC,KAAK,CAACsD,WAAW,CAAC/C,OAAO,IAAI;IACxD8C,GAAG,CAACI,QAAQ,IAAIA,QAAQ,CAACM,MAAM,CAACtB,IAAI,IAAIlC,OAAO,KAAKkC,IAAI,CAAClC,OAAO,CAAC,CAAC;EACpE,CAAC,EAAE,EAAE,CAAC;EACN,MAAMiB,KAAK,GAAGxB,KAAK,CAACgE,OAAO,CAAC,OAAO;IACjC5B,WAAW,EAAEgB,KAAK;IAClBlB,kBAAkB;IAClBC,oBAAoB;IACpBE,QAAQ,EAAEc;EACZ,CAAC,CAAC,EAAE,CAACC,KAAK,EAAElB,kBAAkB,EAAEC,oBAAoB,EAAEgB,EAAE,CAAC,CAAC;EAC1D,OAAO,aAAa/C,IAAI,CAACa,iBAAiB,CAACgD,QAAQ,EAAE;IACnDzC,KAAK,EAAEA,KAAK;IACZ0B,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ;AACA/B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG2B,kBAAkB,CAACkB,SAAS,GAAG;EACrEhB,QAAQ,EAAEjD,SAAS,CAACkE,IAAI;EACxBhB,EAAE,EAAElD,SAAS,CAACmE;AAChB,CAAC,GAAG,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}