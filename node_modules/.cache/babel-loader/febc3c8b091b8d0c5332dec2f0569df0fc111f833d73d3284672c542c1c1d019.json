{"ast":null,"code":"import * as React from 'react';\nimport { EventManager } from '../../utils/EventManager';\nimport { populateInstance } from '../../useTreeView/useTreeView.utils';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nexport const useTreeViewInstanceEvents = ({\n  instance\n}) => {\n  const [eventManager] = React.useState(() => new EventManager());\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    eventManager.emit(name, params, event);\n  }, [eventManager]);\n  const subscribeEvent = React.useCallback((event, handler) => {\n    eventManager.on(event, handler);\n    return () => {\n      eventManager.removeListener(event, handler);\n    };\n  }, [eventManager]);\n  populateInstance(instance, {\n    $$publishEvent: publishEvent,\n    $$subscribeEvent: subscribeEvent\n  });\n};\nuseTreeViewInstanceEvents.params = {};","map":{"version":3,"names":["React","EventManager","populateInstance","isSyntheticEvent","event","isPropagationStopped","undefined","useTreeViewInstanceEvents","instance","eventManager","useState","publishEvent","useCallback","args","name","params","defaultMuiPrevented","emit","subscribeEvent","handler","on","removeListener","$$publishEvent","$$subscribeEvent"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/corePlugins/useTreeViewInstanceEvents/useTreeViewInstanceEvents.js"],"sourcesContent":["import * as React from 'react';\nimport { EventManager } from '../../utils/EventManager';\nimport { populateInstance } from '../../useTreeView/useTreeView.utils';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nexport const useTreeViewInstanceEvents = ({\n  instance\n}) => {\n  const [eventManager] = React.useState(() => new EventManager());\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    eventManager.emit(name, params, event);\n  }, [eventManager]);\n  const subscribeEvent = React.useCallback((event, handler) => {\n    eventManager.on(event, handler);\n    return () => {\n      eventManager.removeListener(event, handler);\n    };\n  }, [eventManager]);\n  populateInstance(instance, {\n    $$publishEvent: publishEvent,\n    $$subscribeEvent: subscribeEvent\n  });\n};\nuseTreeViewInstanceEvents.params = {};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;EAChC,OAAOA,KAAK,CAACC,oBAAoB,KAAKC,SAAS;AACjD,CAAC;AACD,OAAO,MAAMC,yBAAyB,GAAGA,CAAC;EACxCC;AACF,CAAC,KAAK;EACJ,MAAM,CAACC,YAAY,CAAC,GAAGT,KAAK,CAACU,QAAQ,CAAC,MAAM,IAAIT,YAAY,CAAC,CAAC,CAAC;EAC/D,MAAMU,YAAY,GAAGX,KAAK,CAACY,WAAW,CAAC,CAAC,GAAGC,IAAI,KAAK;IAClD,MAAM,CAACC,IAAI,EAAEC,MAAM,EAAEX,KAAK,GAAG,CAAC,CAAC,CAAC,GAAGS,IAAI;IACvCT,KAAK,CAACY,mBAAmB,GAAG,KAAK;IACjC,IAAIb,gBAAgB,CAACC,KAAK,CAAC,IAAIA,KAAK,CAACC,oBAAoB,CAAC,CAAC,EAAE;MAC3D;IACF;IACAI,YAAY,CAACQ,IAAI,CAACH,IAAI,EAAEC,MAAM,EAAEX,KAAK,CAAC;EACxC,CAAC,EAAE,CAACK,YAAY,CAAC,CAAC;EAClB,MAAMS,cAAc,GAAGlB,KAAK,CAACY,WAAW,CAAC,CAACR,KAAK,EAAEe,OAAO,KAAK;IAC3DV,YAAY,CAACW,EAAE,CAAChB,KAAK,EAAEe,OAAO,CAAC;IAC/B,OAAO,MAAM;MACXV,YAAY,CAACY,cAAc,CAACjB,KAAK,EAAEe,OAAO,CAAC;IAC7C,CAAC;EACH,CAAC,EAAE,CAACV,YAAY,CAAC,CAAC;EAClBP,gBAAgB,CAACM,QAAQ,EAAE;IACzBc,cAAc,EAAEX,YAAY;IAC5BY,gBAAgB,EAAEL;EACpB,CAAC,CAAC;AACJ,CAAC;AACDX,yBAAyB,CAACQ,MAAM,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}