{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { populateInstance } from '../../useTreeView/useTreeView.utils';\nimport { publishTreeViewEvent } from '../../utils/publishTreeViewEvent';\nimport { useTreeViewContext } from '../../TreeViewProvider/useTreeViewContext';\nimport { DescendantProvider, useDescendant } from '../../TreeViewProvider/DescendantProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useTreeViewJSXNodes = _ref => {\n  let {\n    instance,\n    setState\n  } = _ref;\n  const insertJSXNode = useEventCallback(node => {\n    setState(prevState => {\n      if (prevState.nodes.nodeMap[node.id] != null) {\n        throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', \"Tow items were provided with the same id in the `items` prop: \\\"\".concat(node.id, \"\\\"\")].join('\\n'));\n      }\n      return _extends({}, prevState, {\n        nodes: _extends({}, prevState.nodes, {\n          nodeMap: _extends({}, prevState.nodes.nodeMap, {\n            [node.id]: node\n          }),\n          // For `SimpleTreeView`, we don't have a proper `item` object, so we create a very basic one.\n          itemMap: _extends({}, prevState.nodes.itemMap, {\n            [node.id]: {\n              id: node.id,\n              label: node.label\n            }\n          })\n        })\n      });\n    });\n  });\n  const removeJSXNode = useEventCallback(itemId => {\n    setState(prevState => {\n      const newNodeMap = _extends({}, prevState.nodes.nodeMap);\n      const newItemMap = _extends({}, prevState.nodes.itemMap);\n      delete newNodeMap[itemId];\n      delete newItemMap[itemId];\n      return _extends({}, prevState, {\n        nodes: _extends({}, prevState.nodes, {\n          nodeMap: newNodeMap,\n          itemMap: newItemMap\n        })\n      });\n    });\n    publishTreeViewEvent(instance, 'removeNode', {\n      id: itemId\n    });\n  });\n  const mapFirstCharFromJSX = useEventCallback((itemId, firstChar) => {\n    instance.updateFirstCharMap(firstCharMap => {\n      firstCharMap[itemId] = firstChar;\n      return firstCharMap;\n    });\n    return () => {\n      instance.updateFirstCharMap(firstCharMap => {\n        const newMap = _extends({}, firstCharMap);\n        delete newMap[itemId];\n        return newMap;\n      });\n    };\n  });\n  populateInstance(instance, {\n    insertJSXNode,\n    removeJSXNode,\n    mapFirstCharFromJSX\n  });\n};\nconst useTreeViewJSXNodesItemPlugin = _ref2 => {\n  let {\n    props,\n    rootRef,\n    contentRef\n  } = _ref2;\n  const {\n    children,\n    disabled = false,\n    label,\n    itemId,\n    id\n  } = props;\n  const {\n    instance\n  } = useTreeViewContext();\n  const isExpandable = reactChildren => {\n    if (Array.isArray(reactChildren)) {\n      return reactChildren.length > 0 && reactChildren.some(isExpandable);\n    }\n    return Boolean(reactChildren);\n  };\n  const expandable = isExpandable(children);\n  const [treeItemElement, setTreeItemElement] = React.useState(null);\n  const pluginContentRef = React.useRef(null);\n  const handleRootRef = useForkRef(setTreeItemElement, rootRef);\n  const handleContentRef = useForkRef(pluginContentRef, contentRef);\n  const descendant = React.useMemo(() => ({\n    element: treeItemElement,\n    id: itemId\n  }), [itemId, treeItemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (index !== -1) {\n      instance.insertJSXNode({\n        id: itemId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled\n      });\n      return () => instance.removeJSXNode(itemId);\n    }\n    return undefined;\n  }, [instance, parentId, index, itemId, expandable, disabled, id]);\n  React.useEffect(() => {\n    if (label) {\n      var _pluginContentRef$cur, _pluginContentRef$cur2;\n      return instance.mapFirstCharFromJSX(itemId, ((_pluginContentRef$cur = (_pluginContentRef$cur2 = pluginContentRef.current) === null || _pluginContentRef$cur2 === void 0 ? void 0 : _pluginContentRef$cur2.textContent) !== null && _pluginContentRef$cur !== void 0 ? _pluginContentRef$cur : '').substring(0, 1).toLowerCase());\n    }\n    return undefined;\n  }, [instance, itemId, label]);\n  return {\n    contentRef: handleContentRef,\n    rootRef: handleRootRef\n  };\n};\nuseTreeViewJSXNodes.itemPlugin = useTreeViewJSXNodesItemPlugin;\nuseTreeViewJSXNodes.wrapItem = _ref3 => {\n  let {\n    children,\n    itemId\n  } = _ref3;\n  return /*#__PURE__*/_jsx(DescendantProvider, {\n    id: itemId,\n    children: children\n  });\n};\nuseTreeViewJSXNodes.params = {};","map":{"version":3,"names":["_extends","React","useEventCallback","useForkRef","populateInstance","publishTreeViewEvent","useTreeViewContext","DescendantProvider","useDescendant","jsx","_jsx","useTreeViewJSXNodes","_ref","instance","setState","insertJSXNode","node","prevState","nodes","nodeMap","id","Error","concat","join","itemMap","label","removeJSXNode","itemId","newNodeMap","newItemMap","mapFirstCharFromJSX","firstChar","updateFirstCharMap","firstCharMap","newMap","useTreeViewJSXNodesItemPlugin","_ref2","props","rootRef","contentRef","children","disabled","isExpandable","reactChildren","Array","isArray","length","some","Boolean","expandable","treeItemElement","setTreeItemElement","useState","pluginContentRef","useRef","handleRootRef","handleContentRef","descendant","useMemo","element","index","parentId","useEffect","idAttribute","undefined","_pluginContentRef$cur","_pluginContentRef$cur2","current","textContent","substring","toLowerCase","itemPlugin","wrapItem","_ref3","params"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/plugins/useTreeViewJSXNodes/useTreeViewJSXNodes.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { populateInstance } from '../../useTreeView/useTreeView.utils';\nimport { publishTreeViewEvent } from '../../utils/publishTreeViewEvent';\nimport { useTreeViewContext } from '../../TreeViewProvider/useTreeViewContext';\nimport { DescendantProvider, useDescendant } from '../../TreeViewProvider/DescendantProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useTreeViewJSXNodes = ({\n  instance,\n  setState\n}) => {\n  const insertJSXNode = useEventCallback(node => {\n    setState(prevState => {\n      if (prevState.nodes.nodeMap[node.id] != null) {\n        throw new Error(['MUI X: The Tree View component requires all items to have a unique `id` property.', 'Alternatively, you can use the `getItemId` prop to specify a custom id for each item.', `Tow items were provided with the same id in the \\`items\\` prop: \"${node.id}\"`].join('\\n'));\n      }\n      return _extends({}, prevState, {\n        nodes: _extends({}, prevState.nodes, {\n          nodeMap: _extends({}, prevState.nodes.nodeMap, {\n            [node.id]: node\n          }),\n          // For `SimpleTreeView`, we don't have a proper `item` object, so we create a very basic one.\n          itemMap: _extends({}, prevState.nodes.itemMap, {\n            [node.id]: {\n              id: node.id,\n              label: node.label\n            }\n          })\n        })\n      });\n    });\n  });\n  const removeJSXNode = useEventCallback(itemId => {\n    setState(prevState => {\n      const newNodeMap = _extends({}, prevState.nodes.nodeMap);\n      const newItemMap = _extends({}, prevState.nodes.itemMap);\n      delete newNodeMap[itemId];\n      delete newItemMap[itemId];\n      return _extends({}, prevState, {\n        nodes: _extends({}, prevState.nodes, {\n          nodeMap: newNodeMap,\n          itemMap: newItemMap\n        })\n      });\n    });\n    publishTreeViewEvent(instance, 'removeNode', {\n      id: itemId\n    });\n  });\n  const mapFirstCharFromJSX = useEventCallback((itemId, firstChar) => {\n    instance.updateFirstCharMap(firstCharMap => {\n      firstCharMap[itemId] = firstChar;\n      return firstCharMap;\n    });\n    return () => {\n      instance.updateFirstCharMap(firstCharMap => {\n        const newMap = _extends({}, firstCharMap);\n        delete newMap[itemId];\n        return newMap;\n      });\n    };\n  });\n  populateInstance(instance, {\n    insertJSXNode,\n    removeJSXNode,\n    mapFirstCharFromJSX\n  });\n};\nconst useTreeViewJSXNodesItemPlugin = ({\n  props,\n  rootRef,\n  contentRef\n}) => {\n  const {\n    children,\n    disabled = false,\n    label,\n    itemId,\n    id\n  } = props;\n  const {\n    instance\n  } = useTreeViewContext();\n  const isExpandable = reactChildren => {\n    if (Array.isArray(reactChildren)) {\n      return reactChildren.length > 0 && reactChildren.some(isExpandable);\n    }\n    return Boolean(reactChildren);\n  };\n  const expandable = isExpandable(children);\n  const [treeItemElement, setTreeItemElement] = React.useState(null);\n  const pluginContentRef = React.useRef(null);\n  const handleRootRef = useForkRef(setTreeItemElement, rootRef);\n  const handleContentRef = useForkRef(pluginContentRef, contentRef);\n  const descendant = React.useMemo(() => ({\n    element: treeItemElement,\n    id: itemId\n  }), [itemId, treeItemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (index !== -1) {\n      instance.insertJSXNode({\n        id: itemId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled\n      });\n      return () => instance.removeJSXNode(itemId);\n    }\n    return undefined;\n  }, [instance, parentId, index, itemId, expandable, disabled, id]);\n  React.useEffect(() => {\n    if (label) {\n      return instance.mapFirstCharFromJSX(itemId, (pluginContentRef.current?.textContent ?? '').substring(0, 1).toLowerCase());\n    }\n    return undefined;\n  }, [instance, itemId, label]);\n  return {\n    contentRef: handleContentRef,\n    rootRef: handleRootRef\n  };\n};\nuseTreeViewJSXNodes.itemPlugin = useTreeViewJSXNodesItemPlugin;\nuseTreeViewJSXNodes.wrapItem = ({\n  children,\n  itemId\n}) => /*#__PURE__*/_jsx(DescendantProvider, {\n  id: itemId,\n  children: children\n});\nuseTreeViewJSXNodes.params = {};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}