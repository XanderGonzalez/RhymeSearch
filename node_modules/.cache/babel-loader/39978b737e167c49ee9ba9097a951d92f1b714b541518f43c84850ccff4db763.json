{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTreeViewModels } from './useTreeViewModels';\nimport { TREE_VIEW_CORE_PLUGINS } from '../corePlugins';\nexport function useTreeViewApiInitialization(inputApiRef) {\n  const fallbackPublicApiRef = React.useRef({});\n  if (inputApiRef) {\n    if (inputApiRef.current == null) {\n      inputApiRef.current = {};\n    }\n    return inputApiRef.current;\n  }\n  return fallbackPublicApiRef.current;\n}\nexport const useTreeView = inParams => {\n  const plugins = [...TREE_VIEW_CORE_PLUGINS, ...inParams.plugins];\n  const params = plugins.reduce((acc, plugin) => {\n    if (plugin.getDefaultizedParams) {\n      return plugin.getDefaultizedParams(acc);\n    }\n    return acc;\n  }, inParams);\n  const models = useTreeViewModels(plugins, params);\n  const instanceRef = React.useRef({});\n  const instance = instanceRef.current;\n  const publicAPI = useTreeViewApiInitialization(inParams.apiRef);\n  const innerRootRef = React.useRef(null);\n  const handleRootRef = useForkRef(innerRootRef, inParams.rootRef);\n  const [state, setState] = React.useState(() => {\n    const temp = {};\n    plugins.forEach(plugin => {\n      if (plugin.getInitialState) {\n        Object.assign(temp, plugin.getInitialState(params));\n      }\n    });\n    return temp;\n  });\n  const rootPropsGetters = [];\n  const contextValue = {\n    publicAPI,\n    instance: instance\n  };\n  const runPlugin = plugin => {\n    const pluginResponse = plugin({\n      instance,\n      publicAPI,\n      params,\n      slots: params.slots,\n      slotProps: params.slotProps,\n      state,\n      setState,\n      rootRef: innerRootRef,\n      models\n    }) || {};\n    if (pluginResponse.getRootProps) {\n      rootPropsGetters.push(pluginResponse.getRootProps);\n    }\n    if (pluginResponse.contextValue) {\n      Object.assign(contextValue, pluginResponse.contextValue);\n    }\n  };\n  plugins.forEach(runPlugin);\n  contextValue.runItemPlugins = itemPluginProps => {\n    let finalRootRef = null;\n    let finalContentRef = null;\n    plugins.forEach(plugin => {\n      if (!plugin.itemPlugin) {\n        return;\n      }\n      const itemPluginResponse = plugin.itemPlugin({\n        props: itemPluginProps,\n        rootRef: finalRootRef,\n        contentRef: finalContentRef\n      });\n      if (itemPluginResponse !== null && itemPluginResponse !== void 0 && itemPluginResponse.rootRef) {\n        finalRootRef = itemPluginResponse.rootRef;\n      }\n      if (itemPluginResponse !== null && itemPluginResponse !== void 0 && itemPluginResponse.contentRef) {\n        finalContentRef = itemPluginResponse.contentRef;\n      }\n    });\n    return {\n      contentRef: finalContentRef,\n      rootRef: finalRootRef\n    };\n  };\n  const itemWrappers = plugins.map(plugin => plugin.wrapItem).filter(wrapItem => !!wrapItem);\n  contextValue.wrapItem = _ref => {\n    let {\n      itemId,\n      children\n    } = _ref;\n    let finalChildren = children;\n    itemWrappers.forEach(itemWrapper => {\n      finalChildren = itemWrapper({\n        itemId,\n        children: finalChildren\n      });\n    });\n    return finalChildren;\n  };\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const rootProps = _extends({\n      role: 'tree'\n    }, otherHandlers, {\n      ref: handleRootRef\n    });\n    rootPropsGetters.forEach(rootPropsGetter => {\n      Object.assign(rootProps, rootPropsGetter(otherHandlers));\n    });\n    return rootProps;\n  };\n  return {\n    getRootProps,\n    rootRef: handleRootRef,\n    contextValue: contextValue,\n    instance: instance\n  };\n};","map":{"version":3,"names":["_extends","React","useForkRef","useTreeViewModels","TREE_VIEW_CORE_PLUGINS","useTreeViewApiInitialization","inputApiRef","fallbackPublicApiRef","useRef","current","useTreeView","inParams","plugins","params","reduce","acc","plugin","getDefaultizedParams","models","instanceRef","instance","publicAPI","apiRef","innerRootRef","handleRootRef","rootRef","state","setState","useState","temp","forEach","getInitialState","Object","assign","rootPropsGetters","contextValue","runPlugin","pluginResponse","slots","slotProps","getRootProps","push","runItemPlugins","itemPluginProps","finalRootRef","finalContentRef","itemPlugin","itemPluginResponse","props","contentRef","itemWrappers","map","wrapItem","filter","_ref","itemId","children","finalChildren","itemWrapper","otherHandlers","arguments","length","undefined","rootProps","role","ref","rootPropsGetter"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/useTreeView/useTreeView.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTreeViewModels } from './useTreeViewModels';\nimport { TREE_VIEW_CORE_PLUGINS } from '../corePlugins';\nexport function useTreeViewApiInitialization(inputApiRef) {\n  const fallbackPublicApiRef = React.useRef({});\n  if (inputApiRef) {\n    if (inputApiRef.current == null) {\n      inputApiRef.current = {};\n    }\n    return inputApiRef.current;\n  }\n  return fallbackPublicApiRef.current;\n}\nexport const useTreeView = inParams => {\n  const plugins = [...TREE_VIEW_CORE_PLUGINS, ...inParams.plugins];\n  const params = plugins.reduce((acc, plugin) => {\n    if (plugin.getDefaultizedParams) {\n      return plugin.getDefaultizedParams(acc);\n    }\n    return acc;\n  }, inParams);\n  const models = useTreeViewModels(plugins, params);\n  const instanceRef = React.useRef({});\n  const instance = instanceRef.current;\n  const publicAPI = useTreeViewApiInitialization(inParams.apiRef);\n  const innerRootRef = React.useRef(null);\n  const handleRootRef = useForkRef(innerRootRef, inParams.rootRef);\n  const [state, setState] = React.useState(() => {\n    const temp = {};\n    plugins.forEach(plugin => {\n      if (plugin.getInitialState) {\n        Object.assign(temp, plugin.getInitialState(params));\n      }\n    });\n    return temp;\n  });\n  const rootPropsGetters = [];\n  const contextValue = {\n    publicAPI,\n    instance: instance\n  };\n  const runPlugin = plugin => {\n    const pluginResponse = plugin({\n      instance,\n      publicAPI,\n      params,\n      slots: params.slots,\n      slotProps: params.slotProps,\n      state,\n      setState,\n      rootRef: innerRootRef,\n      models\n    }) || {};\n    if (pluginResponse.getRootProps) {\n      rootPropsGetters.push(pluginResponse.getRootProps);\n    }\n    if (pluginResponse.contextValue) {\n      Object.assign(contextValue, pluginResponse.contextValue);\n    }\n  };\n  plugins.forEach(runPlugin);\n  contextValue.runItemPlugins = itemPluginProps => {\n    let finalRootRef = null;\n    let finalContentRef = null;\n    plugins.forEach(plugin => {\n      if (!plugin.itemPlugin) {\n        return;\n      }\n      const itemPluginResponse = plugin.itemPlugin({\n        props: itemPluginProps,\n        rootRef: finalRootRef,\n        contentRef: finalContentRef\n      });\n      if (itemPluginResponse?.rootRef) {\n        finalRootRef = itemPluginResponse.rootRef;\n      }\n      if (itemPluginResponse?.contentRef) {\n        finalContentRef = itemPluginResponse.contentRef;\n      }\n    });\n    return {\n      contentRef: finalContentRef,\n      rootRef: finalRootRef\n    };\n  };\n  const itemWrappers = plugins.map(plugin => plugin.wrapItem).filter(wrapItem => !!wrapItem);\n  contextValue.wrapItem = ({\n    itemId,\n    children\n  }) => {\n    let finalChildren = children;\n    itemWrappers.forEach(itemWrapper => {\n      finalChildren = itemWrapper({\n        itemId,\n        children: finalChildren\n      });\n    });\n    return finalChildren;\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    const rootProps = _extends({\n      role: 'tree'\n    }, otherHandlers, {\n      ref: handleRootRef\n    });\n    rootPropsGetters.forEach(rootPropsGetter => {\n      Object.assign(rootProps, rootPropsGetter(otherHandlers));\n    });\n    return rootProps;\n  };\n  return {\n    getRootProps,\n    rootRef: handleRootRef,\n    contextValue: contextValue,\n    instance: instance\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}