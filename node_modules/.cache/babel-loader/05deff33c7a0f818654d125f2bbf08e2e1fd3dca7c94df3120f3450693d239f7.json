{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { extractEventHandlers } from '@mui/base/utils';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTreeViewContext } from '../internals/TreeViewProvider/useTreeViewContext';\nimport { useTreeItem2Utils } from '../hooks/useTreeItem2Utils';\nexport const useTreeItem2 = parameters => {\n  const {\n    runItemPlugins,\n    selection: {\n      multiSelect\n    },\n    disabledItemsFocusable,\n    instance,\n    publicAPI\n  } = useTreeViewContext();\n  const {\n    id,\n    itemId,\n    label,\n    children,\n    rootRef\n  } = parameters;\n  const {\n    rootRef: pluginRootRef,\n    contentRef\n  } = runItemPlugins(parameters);\n  const {\n    interactions,\n    status\n  } = useTreeItem2Utils({\n    itemId,\n    children\n  });\n  const idAttribute = instance.getTreeItemId(itemId, id);\n  const handleRootRef = useForkRef(rootRef, pluginRootRef);\n  const createRootHandleFocus = otherHandlers => event => {\n    otherHandlers.onFocus?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const canBeFocused = !status.disabled || disabledItemsFocusable;\n    if (!status.focused && canBeFocused && event.currentTarget === event.target) {\n      instance.focusItem(event, itemId);\n    }\n  };\n  const createRootHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    instance.removeFocusedItem();\n  };\n  const createRootHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    instance.handleItemKeyDown(event, itemId);\n  };\n  const createContentHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    interactions.handleExpansion(event);\n    interactions.handleSelection(event);\n  };\n  const createContentHandleMouseDown = otherHandlers => event => {\n    otherHandlers.onMouseDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    // Prevent text selection\n    if (event.shiftKey || event.ctrlKey || event.metaKey || status.disabled) {\n      event.preventDefault();\n    }\n  };\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    let ariaSelected;\n    if (multiSelect) {\n      ariaSelected = status.selected;\n    } else if (status.selected) {\n      /* single-selection trees unset aria-selected on un-selected items.\n       *\n       * If the tree does not support multiple selection, aria-selected\n       * is set to true for the selected item and it is not present on any other item in the tree.\n       * Source: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/\n       */\n      ariaSelected = true;\n    }\n    return _extends({}, externalEventHandlers, {\n      ref: handleRootRef,\n      role: 'treeitem',\n      tabIndex: instance.canItemBeTabbed(itemId) ? 0 : -1,\n      id: idAttribute,\n      'aria-expanded': status.expandable ? status.expanded : undefined,\n      'aria-selected': ariaSelected,\n      'aria-disabled': status.disabled || undefined\n    }, externalProps, {\n      onFocus: createRootHandleFocus(externalEventHandlers),\n      onBlur: createRootHandleBlur(externalEventHandlers),\n      onKeyDown: createRootHandleKeyDown(externalEventHandlers)\n    });\n  };\n  const getContentProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, externalProps, {\n      ref: contentRef,\n      onClick: createContentHandleClick(externalEventHandlers),\n      onMouseDown: createContentHandleMouseDown(externalEventHandlers),\n      status\n    });\n  };\n  const getLabelProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, {\n      children: label\n    }, externalProps);\n  };\n  const getIconContainerProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, externalProps);\n  };\n  const getGroupTransitionProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, {\n      unmountOnExit: true,\n      component: 'ul',\n      role: 'group',\n      in: status.expanded,\n      children\n    }, externalProps);\n  };\n  return {\n    getRootProps,\n    getContentProps,\n    getGroupTransitionProps,\n    getIconContainerProps,\n    getLabelProps,\n    rootRef: handleRootRef,\n    status,\n    publicAPI\n  };\n};","map":{"version":3,"names":["_extends","extractEventHandlers","useForkRef","useTreeViewContext","useTreeItem2Utils","useTreeItem2","parameters","runItemPlugins","selection","multiSelect","disabledItemsFocusable","instance","publicAPI","id","itemId","label","children","rootRef","pluginRootRef","contentRef","interactions","status","idAttribute","getTreeItemId","handleRootRef","createRootHandleFocus","otherHandlers","event","onFocus","defaultMuiPrevented","canBeFocused","disabled","focused","currentTarget","target","focusItem","createRootHandleBlur","onBlur","removeFocusedItem","createRootHandleKeyDown","onKeyDown","handleItemKeyDown","createContentHandleClick","onClick","handleExpansion","handleSelection","createContentHandleMouseDown","onMouseDown","shiftKey","ctrlKey","metaKey","preventDefault","getRootProps","externalProps","externalEventHandlers","ariaSelected","selected","ref","role","tabIndex","canItemBeTabbed","expandable","expanded","undefined","getContentProps","getLabelProps","getIconContainerProps","getGroupTransitionProps","unmountOnExit","component","in"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/useTreeItem2/useTreeItem2.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { extractEventHandlers } from '@mui/base/utils';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTreeViewContext } from '../internals/TreeViewProvider/useTreeViewContext';\nimport { useTreeItem2Utils } from '../hooks/useTreeItem2Utils';\nexport const useTreeItem2 = parameters => {\n  const {\n    runItemPlugins,\n    selection: {\n      multiSelect\n    },\n    disabledItemsFocusable,\n    instance,\n    publicAPI\n  } = useTreeViewContext();\n  const {\n    id,\n    itemId,\n    label,\n    children,\n    rootRef\n  } = parameters;\n  const {\n    rootRef: pluginRootRef,\n    contentRef\n  } = runItemPlugins(parameters);\n  const {\n    interactions,\n    status\n  } = useTreeItem2Utils({\n    itemId,\n    children\n  });\n  const idAttribute = instance.getTreeItemId(itemId, id);\n  const handleRootRef = useForkRef(rootRef, pluginRootRef);\n  const createRootHandleFocus = otherHandlers => event => {\n    otherHandlers.onFocus?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const canBeFocused = !status.disabled || disabledItemsFocusable;\n    if (!status.focused && canBeFocused && event.currentTarget === event.target) {\n      instance.focusItem(event, itemId);\n    }\n  };\n  const createRootHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    instance.removeFocusedItem();\n  };\n  const createRootHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    instance.handleItemKeyDown(event, itemId);\n  };\n  const createContentHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    interactions.handleExpansion(event);\n    interactions.handleSelection(event);\n  };\n  const createContentHandleMouseDown = otherHandlers => event => {\n    otherHandlers.onMouseDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    // Prevent text selection\n    if (event.shiftKey || event.ctrlKey || event.metaKey || status.disabled) {\n      event.preventDefault();\n    }\n  };\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    let ariaSelected;\n    if (multiSelect) {\n      ariaSelected = status.selected;\n    } else if (status.selected) {\n      /* single-selection trees unset aria-selected on un-selected items.\n       *\n       * If the tree does not support multiple selection, aria-selected\n       * is set to true for the selected item and it is not present on any other item in the tree.\n       * Source: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/\n       */\n      ariaSelected = true;\n    }\n    return _extends({}, externalEventHandlers, {\n      ref: handleRootRef,\n      role: 'treeitem',\n      tabIndex: instance.canItemBeTabbed(itemId) ? 0 : -1,\n      id: idAttribute,\n      'aria-expanded': status.expandable ? status.expanded : undefined,\n      'aria-selected': ariaSelected,\n      'aria-disabled': status.disabled || undefined\n    }, externalProps, {\n      onFocus: createRootHandleFocus(externalEventHandlers),\n      onBlur: createRootHandleBlur(externalEventHandlers),\n      onKeyDown: createRootHandleKeyDown(externalEventHandlers)\n    });\n  };\n  const getContentProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, externalProps, {\n      ref: contentRef,\n      onClick: createContentHandleClick(externalEventHandlers),\n      onMouseDown: createContentHandleMouseDown(externalEventHandlers),\n      status\n    });\n  };\n  const getLabelProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, {\n      children: label\n    }, externalProps);\n  };\n  const getIconContainerProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, externalProps);\n  };\n  const getGroupTransitionProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({}, externalEventHandlers, {\n      unmountOnExit: true,\n      component: 'ul',\n      role: 'group',\n      in: status.expanded,\n      children\n    }, externalProps);\n  };\n  return {\n    getRootProps,\n    getContentProps,\n    getGroupTransitionProps,\n    getIconContainerProps,\n    getLabelProps,\n    rootRef: handleRootRef,\n    status,\n    publicAPI\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}