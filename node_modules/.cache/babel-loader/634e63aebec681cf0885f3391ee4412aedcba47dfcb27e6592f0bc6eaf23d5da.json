{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { getFirstNode, getLastNode, getNextNode, getPreviousNode, populateInstance } from '../../useTreeView/useTreeView.utils';\nfunction isPrintableCharacter(string) {\n  return !!string && string.length === 1 && !!string.match(/\\S/);\n}\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n  return -1;\n}\nexport const useTreeViewKeyboardNavigation = _ref => {\n  let {\n    instance,\n    params\n  } = _ref;\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const firstCharMap = React.useRef({});\n  const hasFirstCharMapBeenUpdatedImperatively = React.useRef(false);\n  const updateFirstCharMap = useEventCallback(callback => {\n    hasFirstCharMapBeenUpdatedImperatively.current = true;\n    firstCharMap.current = callback(firstCharMap.current);\n  });\n  React.useEffect(() => {\n    if (hasFirstCharMapBeenUpdatedImperatively.current) {\n      return;\n    }\n    const newFirstCharMap = {};\n    const processItem = item => {\n      var _item$children;\n      const getItemId = params.getItemId;\n      const itemId = getItemId ? getItemId(item) : item.id;\n      newFirstCharMap[itemId] = instance.getNode(itemId).label.substring(0, 1).toLowerCase();\n      (_item$children = item.children) === null || _item$children === void 0 || _item$children.forEach(processItem);\n    };\n    params.items.forEach(processItem);\n    firstCharMap.current = newFirstCharMap;\n  }, [params.items, params.getItemId, instance]);\n  const getFirstMatchingItem = (itemId, firstChar) => {\n    let start;\n    let index;\n    const lowercaseChar = firstChar.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = [];\n    // This really only works since the ids are strings\n    Object.keys(firstCharMap.current).forEach(mapItemId => {\n      const map = instance.getNode(mapItemId);\n      const visible = map.parentId ? instance.isNodeExpanded(map.parentId) : true;\n      const shouldBeSkipped = params.disabledItemsFocusable ? false : instance.isNodeDisabled(mapItemId);\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(mapItemId);\n        firstChars.push(firstCharMap.current[mapItemId]);\n      }\n    });\n\n    // Get start index for search based on position of currentItem\n    start = firstCharIds.indexOf(itemId) + 1;\n    if (start >= firstCharIds.length) {\n      start = 0;\n    }\n\n    // Check remaining slots in the menu\n    index = findNextFirstChar(firstChars, start, lowercaseChar);\n\n    // If not found in remaining slots, check from beginning\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    }\n\n    // If a match was found...\n    if (index > -1) {\n      return firstCharIds[index];\n    }\n    return null;\n  };\n  const canToggleItemSelection = itemId => !params.disableSelection && !instance.isNodeDisabled(itemId);\n  const canToggleItemExpansion = itemId => {\n    return !instance.isNodeDisabled(itemId) && instance.isNodeExpandable(itemId);\n  };\n\n  // ARIA specification: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/#keyboardinteraction\n  const handleItemKeyDown = (event, itemId) => {\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.altKey || event.currentTarget !== event.target) {\n      return;\n    }\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n    const key = event.key;\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select the node when pressing \"Space\"\n      case key === ' ' && canToggleItemSelection(itemId):\n        {\n          event.preventDefault();\n          if (params.multiSelect && event.shiftKey) {\n            instance.selectRange(event, {\n              end: itemId\n            });\n          } else if (params.multiSelect) {\n            instance.selectNode(event, itemId, true);\n          } else {\n            instance.selectNode(event, itemId);\n          }\n          break;\n        }\n\n      // If the focused node has children, we expand it.\n      // If the focused node has no children, we select it.\n      case key === 'Enter':\n        {\n          if (canToggleItemExpansion(itemId)) {\n            instance.toggleNodeExpansion(event, itemId);\n            event.preventDefault();\n          } else if (canToggleItemSelection(itemId)) {\n            if (params.multiSelect) {\n              event.preventDefault();\n              instance.selectNode(event, itemId, true);\n            } else if (!instance.isNodeSelected(itemId)) {\n              instance.selectNode(event, itemId);\n              event.preventDefault();\n            }\n          }\n          break;\n        }\n\n      // Focus the next focusable item\n      case key === 'ArrowDown':\n        {\n          const nextItem = getNextNode(instance, itemId);\n          if (nextItem) {\n            event.preventDefault();\n            instance.focusItem(event, nextItem);\n\n            // Multi select behavior when pressing Shift + ArrowDown\n            // Toggles the selection state of the next item\n            if (params.multiSelect && event.shiftKey && canToggleItemSelection(nextItem)) {\n              instance.selectRange(event, {\n                end: nextItem,\n                current: itemId\n              }, true);\n            }\n          }\n          break;\n        }\n\n      // Focuses the previous focusable item\n      case key === 'ArrowUp':\n        {\n          const previousItem = getPreviousNode(instance, itemId);\n          if (previousItem) {\n            event.preventDefault();\n            instance.focusItem(event, previousItem);\n\n            // Multi select behavior when pressing Shift + ArrowUp\n            // Toggles the selection state of the previous item\n            if (params.multiSelect && event.shiftKey && canToggleItemSelection(previousItem)) {\n              instance.selectRange(event, {\n                end: previousItem,\n                current: itemId\n              }, true);\n            }\n          }\n          break;\n        }\n\n      // If the focused item is expanded, we move the focus to its first child\n      // If the focused item is collapsed and has children, we expand it\n      case key === 'ArrowRight' && !isRTL || key === 'ArrowLeft' && isRTL:\n        {\n          if (instance.isNodeExpanded(itemId)) {\n            const nextNodeId = getNextNode(instance, itemId);\n            if (nextNodeId) {\n              instance.focusItem(event, nextNodeId);\n              event.preventDefault();\n            }\n          } else if (canToggleItemExpansion(itemId)) {\n            instance.toggleNodeExpansion(event, itemId);\n            event.preventDefault();\n          }\n          break;\n        }\n\n      // If the focused item is expanded, we collapse it\n      // If the focused item is collapsed and has a parent, we move the focus to this parent\n      case key === 'ArrowLeft' && !isRTL || key === 'ArrowRight' && isRTL:\n        {\n          if (canToggleItemExpansion(itemId) && instance.isNodeExpanded(itemId)) {\n            instance.toggleNodeExpansion(event, itemId);\n            event.preventDefault();\n          } else {\n            const parent = instance.getNode(itemId).parentId;\n            if (parent) {\n              instance.focusItem(event, parent);\n              event.preventDefault();\n            }\n          }\n          break;\n        }\n\n      // Focuses the first node in the tree\n      case key === 'Home':\n        {\n          instance.focusItem(event, getFirstNode(instance));\n\n          // Multi select behavior when pressing Ctrl + Shift + Home\n          // Selects the focused node and all nodes up to the first node.\n          if (canToggleItemSelection(itemId) && params.multiSelect && ctrlPressed && event.shiftKey) {\n            instance.rangeSelectToFirst(event, itemId);\n          }\n          event.preventDefault();\n          break;\n        }\n\n      // Focuses the last item in the tree\n      case key === 'End':\n        {\n          instance.focusItem(event, getLastNode(instance));\n\n          // Multi select behavior when pressing Ctrl + Shirt + End\n          // Selects the focused item and all the items down to the last item.\n          if (canToggleItemSelection(itemId) && params.multiSelect && ctrlPressed && event.shiftKey) {\n            instance.rangeSelectToLast(event, itemId);\n          }\n          event.preventDefault();\n          break;\n        }\n\n      // Expand all siblings that are at the same level as the focused item\n      case key === '*':\n        {\n          instance.expandAllSiblings(event, itemId);\n          event.preventDefault();\n          break;\n        }\n\n      // Multi select behavior when pressing Ctrl + a\n      // Selects all the nodes\n      case key === 'a' && ctrlPressed && params.multiSelect && !params.disableSelection:\n        {\n          instance.selectRange(event, {\n            start: getFirstNode(instance),\n            end: getLastNode(instance)\n          });\n          event.preventDefault();\n          break;\n        }\n\n      // Type-ahead\n      // TODO: Support typing multiple characters\n      case !ctrlPressed && !event.shiftKey && isPrintableCharacter(key):\n        {\n          const matchingNode = getFirstMatchingItem(itemId, key);\n          if (matchingNode != null) {\n            instance.focusItem(event, matchingNode);\n            event.preventDefault();\n          }\n          break;\n        }\n    }\n  };\n  populateInstance(instance, {\n    updateFirstCharMap,\n    handleItemKeyDown\n  });\n};\nuseTreeViewKeyboardNavigation.params = {};","map":{"version":3,"names":["React","useTheme","useEventCallback","getFirstNode","getLastNode","getNextNode","getPreviousNode","populateInstance","isPrintableCharacter","string","length","match","findNextFirstChar","firstChars","startIndex","char","i","useTreeViewKeyboardNavigation","_ref","instance","params","theme","isRTL","direction","firstCharMap","useRef","hasFirstCharMapBeenUpdatedImperatively","updateFirstCharMap","callback","current","useEffect","newFirstCharMap","processItem","item","_item$children","getItemId","itemId","id","getNode","label","substring","toLowerCase","children","forEach","items","getFirstMatchingItem","firstChar","start","index","lowercaseChar","firstCharIds","Object","keys","mapItemId","map","visible","parentId","isNodeExpanded","shouldBeSkipped","disabledItemsFocusable","isNodeDisabled","push","indexOf","canToggleItemSelection","disableSelection","canToggleItemExpansion","isNodeExpandable","handleItemKeyDown","event","defaultMuiPrevented","altKey","currentTarget","target","ctrlPressed","ctrlKey","metaKey","key","preventDefault","multiSelect","shiftKey","selectRange","end","selectNode","toggleNodeExpansion","isNodeSelected","nextItem","focusItem","previousItem","nextNodeId","parent","rangeSelectToFirst","rangeSelectToLast","expandAllSiblings","matchingNode"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/plugins/useTreeViewKeyboardNavigation/useTreeViewKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { getFirstNode, getLastNode, getNextNode, getPreviousNode, populateInstance } from '../../useTreeView/useTreeView.utils';\nfunction isPrintableCharacter(string) {\n  return !!string && string.length === 1 && !!string.match(/\\S/);\n}\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n  return -1;\n}\nexport const useTreeViewKeyboardNavigation = ({\n  instance,\n  params\n}) => {\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const firstCharMap = React.useRef({});\n  const hasFirstCharMapBeenUpdatedImperatively = React.useRef(false);\n  const updateFirstCharMap = useEventCallback(callback => {\n    hasFirstCharMapBeenUpdatedImperatively.current = true;\n    firstCharMap.current = callback(firstCharMap.current);\n  });\n  React.useEffect(() => {\n    if (hasFirstCharMapBeenUpdatedImperatively.current) {\n      return;\n    }\n    const newFirstCharMap = {};\n    const processItem = item => {\n      const getItemId = params.getItemId;\n      const itemId = getItemId ? getItemId(item) : item.id;\n      newFirstCharMap[itemId] = instance.getNode(itemId).label.substring(0, 1).toLowerCase();\n      item.children?.forEach(processItem);\n    };\n    params.items.forEach(processItem);\n    firstCharMap.current = newFirstCharMap;\n  }, [params.items, params.getItemId, instance]);\n  const getFirstMatchingItem = (itemId, firstChar) => {\n    let start;\n    let index;\n    const lowercaseChar = firstChar.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = [];\n    // This really only works since the ids are strings\n    Object.keys(firstCharMap.current).forEach(mapItemId => {\n      const map = instance.getNode(mapItemId);\n      const visible = map.parentId ? instance.isNodeExpanded(map.parentId) : true;\n      const shouldBeSkipped = params.disabledItemsFocusable ? false : instance.isNodeDisabled(mapItemId);\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(mapItemId);\n        firstChars.push(firstCharMap.current[mapItemId]);\n      }\n    });\n\n    // Get start index for search based on position of currentItem\n    start = firstCharIds.indexOf(itemId) + 1;\n    if (start >= firstCharIds.length) {\n      start = 0;\n    }\n\n    // Check remaining slots in the menu\n    index = findNextFirstChar(firstChars, start, lowercaseChar);\n\n    // If not found in remaining slots, check from beginning\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    }\n\n    // If a match was found...\n    if (index > -1) {\n      return firstCharIds[index];\n    }\n    return null;\n  };\n  const canToggleItemSelection = itemId => !params.disableSelection && !instance.isNodeDisabled(itemId);\n  const canToggleItemExpansion = itemId => {\n    return !instance.isNodeDisabled(itemId) && instance.isNodeExpandable(itemId);\n  };\n\n  // ARIA specification: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/#keyboardinteraction\n  const handleItemKeyDown = (event, itemId) => {\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.altKey || event.currentTarget !== event.target) {\n      return;\n    }\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n    const key = event.key;\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select the node when pressing \"Space\"\n      case key === ' ' && canToggleItemSelection(itemId):\n        {\n          event.preventDefault();\n          if (params.multiSelect && event.shiftKey) {\n            instance.selectRange(event, {\n              end: itemId\n            });\n          } else if (params.multiSelect) {\n            instance.selectNode(event, itemId, true);\n          } else {\n            instance.selectNode(event, itemId);\n          }\n          break;\n        }\n\n      // If the focused node has children, we expand it.\n      // If the focused node has no children, we select it.\n      case key === 'Enter':\n        {\n          if (canToggleItemExpansion(itemId)) {\n            instance.toggleNodeExpansion(event, itemId);\n            event.preventDefault();\n          } else if (canToggleItemSelection(itemId)) {\n            if (params.multiSelect) {\n              event.preventDefault();\n              instance.selectNode(event, itemId, true);\n            } else if (!instance.isNodeSelected(itemId)) {\n              instance.selectNode(event, itemId);\n              event.preventDefault();\n            }\n          }\n          break;\n        }\n\n      // Focus the next focusable item\n      case key === 'ArrowDown':\n        {\n          const nextItem = getNextNode(instance, itemId);\n          if (nextItem) {\n            event.preventDefault();\n            instance.focusItem(event, nextItem);\n\n            // Multi select behavior when pressing Shift + ArrowDown\n            // Toggles the selection state of the next item\n            if (params.multiSelect && event.shiftKey && canToggleItemSelection(nextItem)) {\n              instance.selectRange(event, {\n                end: nextItem,\n                current: itemId\n              }, true);\n            }\n          }\n          break;\n        }\n\n      // Focuses the previous focusable item\n      case key === 'ArrowUp':\n        {\n          const previousItem = getPreviousNode(instance, itemId);\n          if (previousItem) {\n            event.preventDefault();\n            instance.focusItem(event, previousItem);\n\n            // Multi select behavior when pressing Shift + ArrowUp\n            // Toggles the selection state of the previous item\n            if (params.multiSelect && event.shiftKey && canToggleItemSelection(previousItem)) {\n              instance.selectRange(event, {\n                end: previousItem,\n                current: itemId\n              }, true);\n            }\n          }\n          break;\n        }\n\n      // If the focused item is expanded, we move the focus to its first child\n      // If the focused item is collapsed and has children, we expand it\n      case key === 'ArrowRight' && !isRTL || key === 'ArrowLeft' && isRTL:\n        {\n          if (instance.isNodeExpanded(itemId)) {\n            const nextNodeId = getNextNode(instance, itemId);\n            if (nextNodeId) {\n              instance.focusItem(event, nextNodeId);\n              event.preventDefault();\n            }\n          } else if (canToggleItemExpansion(itemId)) {\n            instance.toggleNodeExpansion(event, itemId);\n            event.preventDefault();\n          }\n          break;\n        }\n\n      // If the focused item is expanded, we collapse it\n      // If the focused item is collapsed and has a parent, we move the focus to this parent\n      case key === 'ArrowLeft' && !isRTL || key === 'ArrowRight' && isRTL:\n        {\n          if (canToggleItemExpansion(itemId) && instance.isNodeExpanded(itemId)) {\n            instance.toggleNodeExpansion(event, itemId);\n            event.preventDefault();\n          } else {\n            const parent = instance.getNode(itemId).parentId;\n            if (parent) {\n              instance.focusItem(event, parent);\n              event.preventDefault();\n            }\n          }\n          break;\n        }\n\n      // Focuses the first node in the tree\n      case key === 'Home':\n        {\n          instance.focusItem(event, getFirstNode(instance));\n\n          // Multi select behavior when pressing Ctrl + Shift + Home\n          // Selects the focused node and all nodes up to the first node.\n          if (canToggleItemSelection(itemId) && params.multiSelect && ctrlPressed && event.shiftKey) {\n            instance.rangeSelectToFirst(event, itemId);\n          }\n          event.preventDefault();\n          break;\n        }\n\n      // Focuses the last item in the tree\n      case key === 'End':\n        {\n          instance.focusItem(event, getLastNode(instance));\n\n          // Multi select behavior when pressing Ctrl + Shirt + End\n          // Selects the focused item and all the items down to the last item.\n          if (canToggleItemSelection(itemId) && params.multiSelect && ctrlPressed && event.shiftKey) {\n            instance.rangeSelectToLast(event, itemId);\n          }\n          event.preventDefault();\n          break;\n        }\n\n      // Expand all siblings that are at the same level as the focused item\n      case key === '*':\n        {\n          instance.expandAllSiblings(event, itemId);\n          event.preventDefault();\n          break;\n        }\n\n      // Multi select behavior when pressing Ctrl + a\n      // Selects all the nodes\n      case key === 'a' && ctrlPressed && params.multiSelect && !params.disableSelection:\n        {\n          instance.selectRange(event, {\n            start: getFirstNode(instance),\n            end: getLastNode(instance)\n          });\n          event.preventDefault();\n          break;\n        }\n\n      // Type-ahead\n      // TODO: Support typing multiple characters\n      case !ctrlPressed && !event.shiftKey && isPrintableCharacter(key):\n        {\n          const matchingNode = getFirstMatchingItem(itemId, key);\n          if (matchingNode != null) {\n            instance.focusItem(event, matchingNode);\n            event.preventDefault();\n          }\n          break;\n        }\n    }\n  };\n  populateInstance(instance, {\n    updateFirstCharMap,\n    handleItemKeyDown\n  });\n};\nuseTreeViewKeyboardNavigation.params = {};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}