{"ast":null,"code":"import { useTreeViewContext } from '../../internals/TreeViewProvider/useTreeViewContext';\nexport const useTreeItem2Utils = ({\n  itemId,\n  children\n}) => {\n  const {\n    instance,\n    selection: {\n      multiSelect\n    }\n  } = useTreeViewContext();\n  const status = {\n    expandable: Boolean(Array.isArray(children) ? children.length : children),\n    expanded: instance.isNodeExpanded(itemId),\n    focused: instance.isNodeFocused(itemId),\n    selected: instance.isNodeSelected(itemId),\n    disabled: instance.isNodeDisabled(itemId)\n  };\n  const handleExpansion = event => {\n    if (status.disabled) {\n      return;\n    }\n    if (!status.focused) {\n      instance.focusItem(event, itemId);\n    }\n    const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n    // If already expanded and trying to toggle selection don't close\n    if (status.expandable && !(multiple && instance.isNodeExpanded(itemId))) {\n      instance.toggleNodeExpansion(event, itemId);\n    }\n  };\n  const handleSelection = event => {\n    if (status.disabled) {\n      return;\n    }\n    if (!status.focused) {\n      instance.focusItem(event, itemId);\n    }\n    const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n    if (multiple) {\n      if (event.shiftKey) {\n        instance.selectRange(event, {\n          end: itemId\n        });\n      } else {\n        instance.selectNode(event, itemId, true);\n      }\n    } else {\n      instance.selectNode(event, itemId);\n    }\n  };\n  const interactions = {\n    handleExpansion,\n    handleSelection\n  };\n  return {\n    interactions,\n    status\n  };\n};","map":{"version":3,"names":["useTreeViewContext","useTreeItem2Utils","itemId","children","instance","selection","multiSelect","status","expandable","Boolean","Array","isArray","length","expanded","isNodeExpanded","focused","isNodeFocused","selected","isNodeSelected","disabled","isNodeDisabled","handleExpansion","event","focusItem","multiple","shiftKey","ctrlKey","metaKey","toggleNodeExpansion","handleSelection","selectRange","end","selectNode","interactions"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/hooks/useTreeItem2Utils/useTreeItem2Utils.js"],"sourcesContent":["import { useTreeViewContext } from '../../internals/TreeViewProvider/useTreeViewContext';\nexport const useTreeItem2Utils = ({\n  itemId,\n  children\n}) => {\n  const {\n    instance,\n    selection: {\n      multiSelect\n    }\n  } = useTreeViewContext();\n  const status = {\n    expandable: Boolean(Array.isArray(children) ? children.length : children),\n    expanded: instance.isNodeExpanded(itemId),\n    focused: instance.isNodeFocused(itemId),\n    selected: instance.isNodeSelected(itemId),\n    disabled: instance.isNodeDisabled(itemId)\n  };\n  const handleExpansion = event => {\n    if (status.disabled) {\n      return;\n    }\n    if (!status.focused) {\n      instance.focusItem(event, itemId);\n    }\n    const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n    // If already expanded and trying to toggle selection don't close\n    if (status.expandable && !(multiple && instance.isNodeExpanded(itemId))) {\n      instance.toggleNodeExpansion(event, itemId);\n    }\n  };\n  const handleSelection = event => {\n    if (status.disabled) {\n      return;\n    }\n    if (!status.focused) {\n      instance.focusItem(event, itemId);\n    }\n    const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n    if (multiple) {\n      if (event.shiftKey) {\n        instance.selectRange(event, {\n          end: itemId\n        });\n      } else {\n        instance.selectNode(event, itemId, true);\n      }\n    } else {\n      instance.selectNode(event, itemId);\n    }\n  };\n  const interactions = {\n    handleExpansion,\n    handleSelection\n  };\n  return {\n    interactions,\n    status\n  };\n};"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,qDAAqD;AACxF,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAChCC,MAAM;EACNC;AACF,CAAC,KAAK;EACJ,MAAM;IACJC,QAAQ;IACRC,SAAS,EAAE;MACTC;IACF;EACF,CAAC,GAAGN,kBAAkB,CAAC,CAAC;EACxB,MAAMO,MAAM,GAAG;IACbC,UAAU,EAAEC,OAAO,CAACC,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,GAAGA,QAAQ,CAACS,MAAM,GAAGT,QAAQ,CAAC;IACzEU,QAAQ,EAAET,QAAQ,CAACU,cAAc,CAACZ,MAAM,CAAC;IACzCa,OAAO,EAAEX,QAAQ,CAACY,aAAa,CAACd,MAAM,CAAC;IACvCe,QAAQ,EAAEb,QAAQ,CAACc,cAAc,CAAChB,MAAM,CAAC;IACzCiB,QAAQ,EAAEf,QAAQ,CAACgB,cAAc,CAAClB,MAAM;EAC1C,CAAC;EACD,MAAMmB,eAAe,GAAGC,KAAK,IAAI;IAC/B,IAAIf,MAAM,CAACY,QAAQ,EAAE;MACnB;IACF;IACA,IAAI,CAACZ,MAAM,CAACQ,OAAO,EAAE;MACnBX,QAAQ,CAACmB,SAAS,CAACD,KAAK,EAAEpB,MAAM,CAAC;IACnC;IACA,MAAMsB,QAAQ,GAAGlB,WAAW,KAAKgB,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,OAAO,CAAC;;IAElF;IACA,IAAIpB,MAAM,CAACC,UAAU,IAAI,EAAEgB,QAAQ,IAAIpB,QAAQ,CAACU,cAAc,CAACZ,MAAM,CAAC,CAAC,EAAE;MACvEE,QAAQ,CAACwB,mBAAmB,CAACN,KAAK,EAAEpB,MAAM,CAAC;IAC7C;EACF,CAAC;EACD,MAAM2B,eAAe,GAAGP,KAAK,IAAI;IAC/B,IAAIf,MAAM,CAACY,QAAQ,EAAE;MACnB;IACF;IACA,IAAI,CAACZ,MAAM,CAACQ,OAAO,EAAE;MACnBX,QAAQ,CAACmB,SAAS,CAACD,KAAK,EAAEpB,MAAM,CAAC;IACnC;IACA,MAAMsB,QAAQ,GAAGlB,WAAW,KAAKgB,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,OAAO,CAAC;IAClF,IAAIH,QAAQ,EAAE;MACZ,IAAIF,KAAK,CAACG,QAAQ,EAAE;QAClBrB,QAAQ,CAAC0B,WAAW,CAACR,KAAK,EAAE;UAC1BS,GAAG,EAAE7B;QACP,CAAC,CAAC;MACJ,CAAC,MAAM;QACLE,QAAQ,CAAC4B,UAAU,CAACV,KAAK,EAAEpB,MAAM,EAAE,IAAI,CAAC;MAC1C;IACF,CAAC,MAAM;MACLE,QAAQ,CAAC4B,UAAU,CAACV,KAAK,EAAEpB,MAAM,CAAC;IACpC;EACF,CAAC;EACD,MAAM+B,YAAY,GAAG;IACnBZ,eAAe;IACfQ;EACF,CAAC;EACD,OAAO;IACLI,YAAY;IACZ1B;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}