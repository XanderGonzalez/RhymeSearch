{"ast":null,"code":"export const getPreviousNode = (instance, itemId) => {\n  const item = instance.getNode(itemId);\n  const siblings = instance.getNavigableChildrenIds(item.parentId);\n  const itemIndex = siblings.indexOf(itemId);\n  if (itemIndex === 0) {\n    return item.parentId;\n  }\n  let currentItem = siblings[itemIndex - 1];\n  while (instance.isNodeExpanded(currentItem) && instance.getNavigableChildrenIds(currentItem).length > 0) {\n    currentItem = instance.getNavigableChildrenIds(currentItem).pop();\n  }\n  return currentItem;\n};\nexport const getNextNode = (instance, itemId) => {\n  // If expanded get first child\n  if (instance.isNodeExpanded(itemId) && instance.getNavigableChildrenIds(itemId).length > 0) {\n    return instance.getNavigableChildrenIds(itemId)[0];\n  }\n  let item = instance.getNode(itemId);\n  while (item != null) {\n    // Try to get next sibling\n    const siblings = instance.getNavigableChildrenIds(item.parentId);\n    const nextSibling = siblings[siblings.indexOf(item.id) + 1];\n    if (nextSibling) {\n      return nextSibling;\n    }\n\n    // If the sibling does not exist, go up a level to the parent and try again.\n    item = instance.getNode(item.parentId);\n  }\n  return null;\n};\nexport const getLastNode = instance => {\n  let lastItem = instance.getNavigableChildrenIds(null).pop();\n  while (instance.isNodeExpanded(lastItem)) {\n    lastItem = instance.getNavigableChildrenIds(lastItem).pop();\n  }\n  return lastItem;\n};\nexport const getFirstNode = instance => instance.getNavigableChildrenIds(null)[0];\nexport const populateInstance = (instance, methods) => {\n  Object.assign(instance, methods);\n};\nexport const populatePublicAPI = (publicAPI, methods) => {\n  Object.assign(publicAPI, methods);\n};","map":{"version":3,"names":["getPreviousNode","instance","itemId","item","getNode","siblings","getNavigableChildrenIds","parentId","itemIndex","indexOf","currentItem","isNodeExpanded","length","pop","getNextNode","nextSibling","id","getLastNode","lastItem","getFirstNode","populateInstance","methods","Object","assign","populatePublicAPI","publicAPI"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/useTreeView/useTreeView.utils.js"],"sourcesContent":["export const getPreviousNode = (instance, itemId) => {\n  const item = instance.getNode(itemId);\n  const siblings = instance.getNavigableChildrenIds(item.parentId);\n  const itemIndex = siblings.indexOf(itemId);\n  if (itemIndex === 0) {\n    return item.parentId;\n  }\n  let currentItem = siblings[itemIndex - 1];\n  while (instance.isNodeExpanded(currentItem) && instance.getNavigableChildrenIds(currentItem).length > 0) {\n    currentItem = instance.getNavigableChildrenIds(currentItem).pop();\n  }\n  return currentItem;\n};\nexport const getNextNode = (instance, itemId) => {\n  // If expanded get first child\n  if (instance.isNodeExpanded(itemId) && instance.getNavigableChildrenIds(itemId).length > 0) {\n    return instance.getNavigableChildrenIds(itemId)[0];\n  }\n  let item = instance.getNode(itemId);\n  while (item != null) {\n    // Try to get next sibling\n    const siblings = instance.getNavigableChildrenIds(item.parentId);\n    const nextSibling = siblings[siblings.indexOf(item.id) + 1];\n    if (nextSibling) {\n      return nextSibling;\n    }\n\n    // If the sibling does not exist, go up a level to the parent and try again.\n    item = instance.getNode(item.parentId);\n  }\n  return null;\n};\nexport const getLastNode = instance => {\n  let lastItem = instance.getNavigableChildrenIds(null).pop();\n  while (instance.isNodeExpanded(lastItem)) {\n    lastItem = instance.getNavigableChildrenIds(lastItem).pop();\n  }\n  return lastItem;\n};\nexport const getFirstNode = instance => instance.getNavigableChildrenIds(null)[0];\nexport const populateInstance = (instance, methods) => {\n  Object.assign(instance, methods);\n};\nexport const populatePublicAPI = (publicAPI, methods) => {\n  Object.assign(publicAPI, methods);\n};"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;EACnD,MAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAO,CAACF,MAAM,CAAC;EACrC,MAAMG,QAAQ,GAAGJ,QAAQ,CAACK,uBAAuB,CAACH,IAAI,CAACI,QAAQ,CAAC;EAChE,MAAMC,SAAS,GAAGH,QAAQ,CAACI,OAAO,CAACP,MAAM,CAAC;EAC1C,IAAIM,SAAS,KAAK,CAAC,EAAE;IACnB,OAAOL,IAAI,CAACI,QAAQ;EACtB;EACA,IAAIG,WAAW,GAAGL,QAAQ,CAACG,SAAS,GAAG,CAAC,CAAC;EACzC,OAAOP,QAAQ,CAACU,cAAc,CAACD,WAAW,CAAC,IAAIT,QAAQ,CAACK,uBAAuB,CAACI,WAAW,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;IACvGF,WAAW,GAAGT,QAAQ,CAACK,uBAAuB,CAACI,WAAW,CAAC,CAACG,GAAG,CAAC,CAAC;EACnE;EACA,OAAOH,WAAW;AACpB,CAAC;AACD,OAAO,MAAMI,WAAW,GAAGA,CAACb,QAAQ,EAAEC,MAAM,KAAK;EAC/C;EACA,IAAID,QAAQ,CAACU,cAAc,CAACT,MAAM,CAAC,IAAID,QAAQ,CAACK,uBAAuB,CAACJ,MAAM,CAAC,CAACU,MAAM,GAAG,CAAC,EAAE;IAC1F,OAAOX,QAAQ,CAACK,uBAAuB,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC;EACpD;EACA,IAAIC,IAAI,GAAGF,QAAQ,CAACG,OAAO,CAACF,MAAM,CAAC;EACnC,OAAOC,IAAI,IAAI,IAAI,EAAE;IACnB;IACA,MAAME,QAAQ,GAAGJ,QAAQ,CAACK,uBAAuB,CAACH,IAAI,CAACI,QAAQ,CAAC;IAChE,MAAMQ,WAAW,GAAGV,QAAQ,CAACA,QAAQ,CAACI,OAAO,CAACN,IAAI,CAACa,EAAE,CAAC,GAAG,CAAC,CAAC;IAC3D,IAAID,WAAW,EAAE;MACf,OAAOA,WAAW;IACpB;;IAEA;IACAZ,IAAI,GAAGF,QAAQ,CAACG,OAAO,CAACD,IAAI,CAACI,QAAQ,CAAC;EACxC;EACA,OAAO,IAAI;AACb,CAAC;AACD,OAAO,MAAMU,WAAW,GAAGhB,QAAQ,IAAI;EACrC,IAAIiB,QAAQ,GAAGjB,QAAQ,CAACK,uBAAuB,CAAC,IAAI,CAAC,CAACO,GAAG,CAAC,CAAC;EAC3D,OAAOZ,QAAQ,CAACU,cAAc,CAACO,QAAQ,CAAC,EAAE;IACxCA,QAAQ,GAAGjB,QAAQ,CAACK,uBAAuB,CAACY,QAAQ,CAAC,CAACL,GAAG,CAAC,CAAC;EAC7D;EACA,OAAOK,QAAQ;AACjB,CAAC;AACD,OAAO,MAAMC,YAAY,GAAGlB,QAAQ,IAAIA,QAAQ,CAACK,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjF,OAAO,MAAMc,gBAAgB,GAAGA,CAACnB,QAAQ,EAAEoB,OAAO,KAAK;EACrDC,MAAM,CAACC,MAAM,CAACtB,QAAQ,EAAEoB,OAAO,CAAC;AAClC,CAAC;AACD,OAAO,MAAMG,iBAAiB,GAAGA,CAACC,SAAS,EAAEJ,OAAO,KAAK;EACvDC,MAAM,CAACC,MAAM,CAACE,SAAS,EAAEJ,OAAO,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}