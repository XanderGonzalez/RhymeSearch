{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport { populateInstance, populatePublicAPI } from '../../useTreeView/useTreeView.utils';\nimport { useInstanceEventHandler } from '../../hooks/useInstanceEventHandler';\nimport { getActiveElement } from '../../utils/utils';\nconst useTabbableItemId = (instance, selectedItems) => {\n  const isItemVisible = itemId => {\n    const node = instance.getNode(itemId);\n    return node && (node.parentId == null || instance.isNodeExpanded(node.parentId));\n  };\n  let tabbableItemId;\n  if (Array.isArray(selectedItems)) {\n    tabbableItemId = selectedItems.find(isItemVisible);\n  } else if (selectedItems != null && isItemVisible(selectedItems)) {\n    tabbableItemId = selectedItems;\n  }\n  if (tabbableItemId == null) {\n    tabbableItemId = instance.getNavigableChildrenIds(null)[0];\n  }\n  return tabbableItemId;\n};\nexport const useTreeViewFocus = _ref => {\n  let {\n    instance,\n    publicAPI,\n    params,\n    state,\n    setState,\n    models,\n    rootRef\n  } = _ref;\n  const tabbableItemId = useTabbableItemId(instance, models.selectedItems.value);\n  const setFocusedItemId = useEventCallback(itemId => {\n    const cleanItemId = typeof itemId === 'function' ? itemId(state.focusedNodeId) : itemId;\n    if (state.focusedNodeId !== cleanItemId) {\n      setState(prevState => _extends({}, prevState, {\n        focusedNodeId: cleanItemId\n      }));\n    }\n  });\n  const isTreeViewFocused = React.useCallback(() => !!rootRef.current && rootRef.current.contains(getActiveElement(ownerDocument(rootRef.current))), [rootRef]);\n  const isNodeFocused = React.useCallback(itemId => state.focusedNodeId === itemId && isTreeViewFocused(), [state.focusedNodeId, isTreeViewFocused]);\n  const isNodeVisible = itemId => {\n    const node = instance.getNode(itemId);\n    return node && (node.parentId == null || instance.isNodeExpanded(node.parentId));\n  };\n  const innerFocusItem = (event, itemId) => {\n    const node = instance.getNode(itemId);\n    const itemElement = document.getElementById(instance.getTreeItemId(itemId, node.idAttribute));\n    if (itemElement) {\n      itemElement.focus();\n    }\n    setFocusedItemId(itemId);\n    if (params.onItemFocus) {\n      params.onItemFocus(event, itemId);\n    }\n  };\n  const focusItem = useEventCallback((event, nodeId) => {\n    // If we receive a nodeId, and it is visible, the focus will be set to it\n    if (isNodeVisible(nodeId)) {\n      innerFocusItem(event, nodeId);\n    }\n  });\n  const focusDefaultNode = useEventCallback(event => {\n    let nodeToFocusId;\n    if (Array.isArray(models.selectedItems.value)) {\n      nodeToFocusId = models.selectedItems.value.find(isNodeVisible);\n    } else if (models.selectedItems.value != null && isNodeVisible(models.selectedItems.value)) {\n      nodeToFocusId = models.selectedItems.value;\n    }\n    if (nodeToFocusId == null) {\n      nodeToFocusId = instance.getNavigableChildrenIds(null)[0];\n    }\n    innerFocusItem(event, nodeToFocusId);\n  });\n  const removeFocusedItem = useEventCallback(() => {\n    if (state.focusedNodeId == null) {\n      return;\n    }\n    const node = instance.getNode(state.focusedNodeId);\n    const itemElement = document.getElementById(instance.getTreeItemId(state.focusedNodeId, node.idAttribute));\n    if (itemElement) {\n      itemElement.blur();\n    }\n    setFocusedItemId(null);\n  });\n  const canItemBeTabbed = itemId => itemId === tabbableItemId;\n  populateInstance(instance, {\n    isNodeFocused,\n    canItemBeTabbed,\n    focusItem,\n    focusDefaultNode,\n    removeFocusedItem\n  });\n  populatePublicAPI(publicAPI, {\n    focusItem\n  });\n  useInstanceEventHandler(instance, 'removeNode', _ref2 => {\n    let {\n      id\n    } = _ref2;\n    if (state.focusedNodeId === id) {\n      instance.focusDefaultNode(null);\n    }\n  });\n  const createHandleFocus = otherHandlers => event => {\n    var _otherHandlers$onFocu;\n    (_otherHandlers$onFocu = otherHandlers.onFocus) === null || _otherHandlers$onFocu === void 0 || _otherHandlers$onFocu.call(otherHandlers, event);\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      instance.focusDefaultNode(event);\n    }\n  };\n  const focusedNode = instance.getNode(state.focusedNodeId);\n  const activeDescendant = focusedNode ? instance.getTreeItemId(focusedNode.id, focusedNode.idAttribute) : null;\n  return {\n    getRootProps: otherHandlers => ({\n      onFocus: createHandleFocus(otherHandlers),\n      'aria-activedescendant': activeDescendant !== null && activeDescendant !== void 0 ? activeDescendant : undefined\n    })\n  };\n};\nuseTreeViewFocus.getInitialState = () => ({\n  focusedNodeId: null\n});\nuseTreeViewFocus.params = {\n  onItemFocus: true\n};","map":{"version":3,"names":["_extends","React","useEventCallback","ownerDocument","populateInstance","populatePublicAPI","useInstanceEventHandler","getActiveElement","useTabbableItemId","instance","selectedItems","isItemVisible","itemId","node","getNode","parentId","isNodeExpanded","tabbableItemId","Array","isArray","find","getNavigableChildrenIds","useTreeViewFocus","_ref","publicAPI","params","state","setState","models","rootRef","value","setFocusedItemId","cleanItemId","focusedNodeId","prevState","isTreeViewFocused","useCallback","current","contains","isNodeFocused","isNodeVisible","innerFocusItem","event","itemElement","document","getElementById","getTreeItemId","idAttribute","focus","onItemFocus","focusItem","nodeId","focusDefaultNode","nodeToFocusId","removeFocusedItem","blur","canItemBeTabbed","_ref2","id","createHandleFocus","otherHandlers","_otherHandlers$onFocu","onFocus","call","target","currentTarget","focusedNode","activeDescendant","getRootProps","undefined","getInitialState"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/plugins/useTreeViewFocus/useTreeViewFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport { populateInstance, populatePublicAPI } from '../../useTreeView/useTreeView.utils';\nimport { useInstanceEventHandler } from '../../hooks/useInstanceEventHandler';\nimport { getActiveElement } from '../../utils/utils';\nconst useTabbableItemId = (instance, selectedItems) => {\n  const isItemVisible = itemId => {\n    const node = instance.getNode(itemId);\n    return node && (node.parentId == null || instance.isNodeExpanded(node.parentId));\n  };\n  let tabbableItemId;\n  if (Array.isArray(selectedItems)) {\n    tabbableItemId = selectedItems.find(isItemVisible);\n  } else if (selectedItems != null && isItemVisible(selectedItems)) {\n    tabbableItemId = selectedItems;\n  }\n  if (tabbableItemId == null) {\n    tabbableItemId = instance.getNavigableChildrenIds(null)[0];\n  }\n  return tabbableItemId;\n};\nexport const useTreeViewFocus = ({\n  instance,\n  publicAPI,\n  params,\n  state,\n  setState,\n  models,\n  rootRef\n}) => {\n  const tabbableItemId = useTabbableItemId(instance, models.selectedItems.value);\n  const setFocusedItemId = useEventCallback(itemId => {\n    const cleanItemId = typeof itemId === 'function' ? itemId(state.focusedNodeId) : itemId;\n    if (state.focusedNodeId !== cleanItemId) {\n      setState(prevState => _extends({}, prevState, {\n        focusedNodeId: cleanItemId\n      }));\n    }\n  });\n  const isTreeViewFocused = React.useCallback(() => !!rootRef.current && rootRef.current.contains(getActiveElement(ownerDocument(rootRef.current))), [rootRef]);\n  const isNodeFocused = React.useCallback(itemId => state.focusedNodeId === itemId && isTreeViewFocused(), [state.focusedNodeId, isTreeViewFocused]);\n  const isNodeVisible = itemId => {\n    const node = instance.getNode(itemId);\n    return node && (node.parentId == null || instance.isNodeExpanded(node.parentId));\n  };\n  const innerFocusItem = (event, itemId) => {\n    const node = instance.getNode(itemId);\n    const itemElement = document.getElementById(instance.getTreeItemId(itemId, node.idAttribute));\n    if (itemElement) {\n      itemElement.focus();\n    }\n    setFocusedItemId(itemId);\n    if (params.onItemFocus) {\n      params.onItemFocus(event, itemId);\n    }\n  };\n  const focusItem = useEventCallback((event, nodeId) => {\n    // If we receive a nodeId, and it is visible, the focus will be set to it\n    if (isNodeVisible(nodeId)) {\n      innerFocusItem(event, nodeId);\n    }\n  });\n  const focusDefaultNode = useEventCallback(event => {\n    let nodeToFocusId;\n    if (Array.isArray(models.selectedItems.value)) {\n      nodeToFocusId = models.selectedItems.value.find(isNodeVisible);\n    } else if (models.selectedItems.value != null && isNodeVisible(models.selectedItems.value)) {\n      nodeToFocusId = models.selectedItems.value;\n    }\n    if (nodeToFocusId == null) {\n      nodeToFocusId = instance.getNavigableChildrenIds(null)[0];\n    }\n    innerFocusItem(event, nodeToFocusId);\n  });\n  const removeFocusedItem = useEventCallback(() => {\n    if (state.focusedNodeId == null) {\n      return;\n    }\n    const node = instance.getNode(state.focusedNodeId);\n    const itemElement = document.getElementById(instance.getTreeItemId(state.focusedNodeId, node.idAttribute));\n    if (itemElement) {\n      itemElement.blur();\n    }\n    setFocusedItemId(null);\n  });\n  const canItemBeTabbed = itemId => itemId === tabbableItemId;\n  populateInstance(instance, {\n    isNodeFocused,\n    canItemBeTabbed,\n    focusItem,\n    focusDefaultNode,\n    removeFocusedItem\n  });\n  populatePublicAPI(publicAPI, {\n    focusItem\n  });\n  useInstanceEventHandler(instance, 'removeNode', ({\n    id\n  }) => {\n    if (state.focusedNodeId === id) {\n      instance.focusDefaultNode(null);\n    }\n  });\n  const createHandleFocus = otherHandlers => event => {\n    otherHandlers.onFocus?.(event);\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      instance.focusDefaultNode(event);\n    }\n  };\n  const focusedNode = instance.getNode(state.focusedNodeId);\n  const activeDescendant = focusedNode ? instance.getTreeItemId(focusedNode.id, focusedNode.idAttribute) : null;\n  return {\n    getRootProps: otherHandlers => ({\n      onFocus: createHandleFocus(otherHandlers),\n      'aria-activedescendant': activeDescendant ?? undefined\n    })\n  };\n};\nuseTreeViewFocus.getInitialState = () => ({\n  focusedNodeId: null\n});\nuseTreeViewFocus.params = {\n  onItemFocus: true\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}