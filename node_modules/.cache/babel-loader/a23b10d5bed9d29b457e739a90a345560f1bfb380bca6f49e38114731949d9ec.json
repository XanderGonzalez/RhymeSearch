{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { populateInstance, getNextNode, getFirstNode, getLastNode } from '../../useTreeView/useTreeView.utils';\nimport { findOrderInTremauxTree } from './useTreeViewSelection.utils';\nexport const useTreeViewSelection = _ref => {\n  let {\n    instance,\n    params,\n    models\n  } = _ref;\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n  const setSelectedItems = (event, newSelectedItems) => {\n    if (params.onItemSelectionToggle) {\n      if (params.multiSelect) {\n        const addedItems = newSelectedItems.filter(itemId => !instance.isNodeSelected(itemId));\n        const removedItems = models.selectedItems.value.filter(itemId => !newSelectedItems.includes(itemId));\n        addedItems.forEach(itemId => {\n          params.onItemSelectionToggle(event, itemId, true);\n        });\n        removedItems.forEach(itemId => {\n          params.onItemSelectionToggle(event, itemId, false);\n        });\n      } else if (newSelectedItems !== models.selectedItems.value) {\n        if (models.selectedItems.value != null) {\n          params.onItemSelectionToggle(event, models.selectedItems.value, false);\n        }\n        if (newSelectedItems != null) {\n          params.onItemSelectionToggle(event, newSelectedItems, true);\n        }\n      }\n    }\n    if (params.onSelectedItemsChange) {\n      params.onSelectedItemsChange(event, newSelectedItems);\n    }\n    models.selectedItems.setControlledValue(newSelectedItems);\n  };\n  const isNodeSelected = itemId => Array.isArray(models.selectedItems.value) ? models.selectedItems.value.indexOf(itemId) !== -1 : models.selectedItems.value === itemId;\n  const selectNode = function (event, itemId) {\n    let multiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (params.disableSelection) {\n      return;\n    }\n    if (multiple) {\n      if (Array.isArray(models.selectedItems.value)) {\n        let newSelected;\n        if (models.selectedItems.value.indexOf(itemId) !== -1) {\n          newSelected = models.selectedItems.value.filter(id => id !== itemId);\n        } else {\n          newSelected = [itemId].concat(models.selectedItems.value);\n        }\n        setSelectedItems(event, newSelected);\n      }\n    } else {\n      const newSelected = params.multiSelect ? [itemId] : itemId;\n      setSelectedItems(event, newSelected);\n    }\n    lastSelectedNode.current = itemId;\n    lastSelectionWasRange.current = false;\n    currentRangeSelection.current = [];\n  };\n  const getNodesInRange = (nodeAId, nodeBId) => {\n    const [first, last] = findOrderInTremauxTree(instance, nodeAId, nodeBId);\n    const nodes = [first];\n    let current = first;\n    while (current !== last) {\n      current = getNextNode(instance, current);\n      nodes.push(current);\n    }\n    return nodes;\n  };\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = models.selectedItems.value.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n    if (!next || !current) {\n      return;\n    }\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n    setSelectedItems(event, base);\n  };\n  const handleRangeSelect = (event, nodes) => {\n    let base = models.selectedItems.value.slice();\n    const {\n      start,\n      end\n    } = nodes;\n    // If last selection was a range selection ignore nodes that were selected.\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !instance.isNodeDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n    setSelectedItems(event, newSelected);\n  };\n  const selectRange = function (event, nodes) {\n    let stacked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (params.disableSelection) {\n      return;\n    }\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n    lastSelectionWasRange.current = true;\n  };\n  const rangeSelectToFirst = (event, itemId) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = itemId;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : itemId;\n    instance.selectRange(event, {\n      start,\n      end: getFirstNode(instance)\n    });\n  };\n  const rangeSelectToLast = (event, itemId) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = itemId;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : itemId;\n    instance.selectRange(event, {\n      start,\n      end: getLastNode(instance)\n    });\n  };\n  populateInstance(instance, {\n    isNodeSelected,\n    selectNode,\n    selectRange,\n    rangeSelectToLast,\n    rangeSelectToFirst\n  });\n  return {\n    getRootProps: () => ({\n      'aria-multiselectable': params.multiSelect\n    }),\n    contextValue: {\n      selection: {\n        multiSelect: params.multiSelect\n      }\n    }\n  };\n};\nuseTreeViewSelection.models = {\n  selectedItems: {\n    getDefaultValue: params => params.defaultSelectedItems\n  }\n};\nconst DEFAULT_SELECTED_NODES = [];\nuseTreeViewSelection.getDefaultizedParams = params => {\n  var _params$disableSelect, _params$multiSelect, _params$defaultSelect;\n  return _extends({}, params, {\n    disableSelection: (_params$disableSelect = params.disableSelection) !== null && _params$disableSelect !== void 0 ? _params$disableSelect : false,\n    multiSelect: (_params$multiSelect = params.multiSelect) !== null && _params$multiSelect !== void 0 ? _params$multiSelect : false,\n    defaultSelectedItems: (_params$defaultSelect = params.defaultSelectedItems) !== null && _params$defaultSelect !== void 0 ? _params$defaultSelect : params.multiSelect ? DEFAULT_SELECTED_NODES : null\n  });\n};\nuseTreeViewSelection.params = {\n  disableSelection: true,\n  multiSelect: true,\n  defaultSelectedItems: true,\n  selectedItems: true,\n  onSelectedItemsChange: true,\n  onItemSelectionToggle: true\n};","map":{"version":3,"names":["_extends","React","populateInstance","getNextNode","getFirstNode","getLastNode","findOrderInTremauxTree","useTreeViewSelection","_ref","instance","params","models","lastSelectedNode","useRef","lastSelectionWasRange","currentRangeSelection","setSelectedItems","event","newSelectedItems","onItemSelectionToggle","multiSelect","addedItems","filter","itemId","isNodeSelected","removedItems","selectedItems","value","includes","forEach","onSelectedItemsChange","setControlledValue","Array","isArray","indexOf","selectNode","multiple","arguments","length","undefined","disableSelection","newSelected","id","concat","current","getNodesInRange","nodeAId","nodeBId","first","last","nodes","push","handleRangeArrowSelect","base","slice","start","next","handleRangeSelect","end","range","node","isNodeDisabled","i","selectRange","stacked","rangeSelectToFirst","rangeSelectToLast","getRootProps","contextValue","selection","getDefaultValue","defaultSelectedItems","DEFAULT_SELECTED_NODES","getDefaultizedParams","_params$disableSelect","_params$multiSelect","_params$defaultSelect"],"sources":["/Users/xander/node_modules/@mui/x-tree-view/internals/plugins/useTreeViewSelection/useTreeViewSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { populateInstance, getNextNode, getFirstNode, getLastNode } from '../../useTreeView/useTreeView.utils';\nimport { findOrderInTremauxTree } from './useTreeViewSelection.utils';\nexport const useTreeViewSelection = ({\n  instance,\n  params,\n  models\n}) => {\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n  const setSelectedItems = (event, newSelectedItems) => {\n    if (params.onItemSelectionToggle) {\n      if (params.multiSelect) {\n        const addedItems = newSelectedItems.filter(itemId => !instance.isNodeSelected(itemId));\n        const removedItems = models.selectedItems.value.filter(itemId => !newSelectedItems.includes(itemId));\n        addedItems.forEach(itemId => {\n          params.onItemSelectionToggle(event, itemId, true);\n        });\n        removedItems.forEach(itemId => {\n          params.onItemSelectionToggle(event, itemId, false);\n        });\n      } else if (newSelectedItems !== models.selectedItems.value) {\n        if (models.selectedItems.value != null) {\n          params.onItemSelectionToggle(event, models.selectedItems.value, false);\n        }\n        if (newSelectedItems != null) {\n          params.onItemSelectionToggle(event, newSelectedItems, true);\n        }\n      }\n    }\n    if (params.onSelectedItemsChange) {\n      params.onSelectedItemsChange(event, newSelectedItems);\n    }\n    models.selectedItems.setControlledValue(newSelectedItems);\n  };\n  const isNodeSelected = itemId => Array.isArray(models.selectedItems.value) ? models.selectedItems.value.indexOf(itemId) !== -1 : models.selectedItems.value === itemId;\n  const selectNode = (event, itemId, multiple = false) => {\n    if (params.disableSelection) {\n      return;\n    }\n    if (multiple) {\n      if (Array.isArray(models.selectedItems.value)) {\n        let newSelected;\n        if (models.selectedItems.value.indexOf(itemId) !== -1) {\n          newSelected = models.selectedItems.value.filter(id => id !== itemId);\n        } else {\n          newSelected = [itemId].concat(models.selectedItems.value);\n        }\n        setSelectedItems(event, newSelected);\n      }\n    } else {\n      const newSelected = params.multiSelect ? [itemId] : itemId;\n      setSelectedItems(event, newSelected);\n    }\n    lastSelectedNode.current = itemId;\n    lastSelectionWasRange.current = false;\n    currentRangeSelection.current = [];\n  };\n  const getNodesInRange = (nodeAId, nodeBId) => {\n    const [first, last] = findOrderInTremauxTree(instance, nodeAId, nodeBId);\n    const nodes = [first];\n    let current = first;\n    while (current !== last) {\n      current = getNextNode(instance, current);\n      nodes.push(current);\n    }\n    return nodes;\n  };\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = models.selectedItems.value.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n    if (!next || !current) {\n      return;\n    }\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n    setSelectedItems(event, base);\n  };\n  const handleRangeSelect = (event, nodes) => {\n    let base = models.selectedItems.value.slice();\n    const {\n      start,\n      end\n    } = nodes;\n    // If last selection was a range selection ignore nodes that were selected.\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !instance.isNodeDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n    setSelectedItems(event, newSelected);\n  };\n  const selectRange = (event, nodes, stacked = false) => {\n    if (params.disableSelection) {\n      return;\n    }\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n    lastSelectionWasRange.current = true;\n  };\n  const rangeSelectToFirst = (event, itemId) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = itemId;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : itemId;\n    instance.selectRange(event, {\n      start,\n      end: getFirstNode(instance)\n    });\n  };\n  const rangeSelectToLast = (event, itemId) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = itemId;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : itemId;\n    instance.selectRange(event, {\n      start,\n      end: getLastNode(instance)\n    });\n  };\n  populateInstance(instance, {\n    isNodeSelected,\n    selectNode,\n    selectRange,\n    rangeSelectToLast,\n    rangeSelectToFirst\n  });\n  return {\n    getRootProps: () => ({\n      'aria-multiselectable': params.multiSelect\n    }),\n    contextValue: {\n      selection: {\n        multiSelect: params.multiSelect\n      }\n    }\n  };\n};\nuseTreeViewSelection.models = {\n  selectedItems: {\n    getDefaultValue: params => params.defaultSelectedItems\n  }\n};\nconst DEFAULT_SELECTED_NODES = [];\nuseTreeViewSelection.getDefaultizedParams = params => _extends({}, params, {\n  disableSelection: params.disableSelection ?? false,\n  multiSelect: params.multiSelect ?? false,\n  defaultSelectedItems: params.defaultSelectedItems ?? (params.multiSelect ? DEFAULT_SELECTED_NODES : null)\n});\nuseTreeViewSelection.params = {\n  disableSelection: true,\n  multiSelect: true,\n  defaultSelectedItems: true,\n  selectedItems: true,\n  onSelectedItemsChange: true,\n  onItemSelectionToggle: true\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}